{
	"name": "EORA-General-Statistics-By-Year",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "ac2sparkpooldev",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "47e69eec-ce7c-4d51-85c0-09030265a644"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/fb276628-ada1-41d2-9fe6-b02c83c5d04e/resourceGroups/ac2-rg-synapse-01/providers/Microsoft.Synapse/workspaces/ac2-synapse-ws-dev/bigDataPools/ac2sparkpooldev",
				"name": "ac2sparkpooldev",
				"type": "Spark",
				"endpoint": "https://ac2-synapse-ws-dev.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ac2sparkpooldev",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import numpy as np\r\n",
					"from scipy.linalg import block_diag\r\n",
					"import warnings\r\n",
					"import pandas as pd\r\n",
					"import io"
				],
				"execution_count": 1
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Compute Stats"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Parameters\r\n",
					"num_cntry = 189\r\n",
					"num_sectors = 26\r\n",
					"num_fd_components = 6\r\n",
					"year_start = 1990\r\n",
					"year_end = 2022\r\n",
					"\r\n",
					"eora_years = np.linspace(year_start, year_end, num = year_end - year_start + 1).astype(int).astype(str)\r\n",
					"\r\n",
					"for i in range(len(eora_years)):\r\n",
					"    #Read in the data\r\n",
					"    fd_matrix_path = 'abfss://acj802@ac2synapsedatalabstorage.dfs.core.windows.net/Eora26_'+eora_years[i]+'_bp/Eora26_'+eora_years[i]+'_bp_FD.txt'\r\n",
					"    id_matrix_path = 'abfss://acj802@ac2synapsedatalabstorage.dfs.core.windows.net/Eora26_'+eora_years[i]+'_bp/Eora26_'+eora_years[i]+'_bp_T.txt'\r\n",
					"    va_matrix_path = 'abfss://acj802@ac2synapsedatalabstorage.dfs.core.windows.net/Eora26_'+eora_years[i]+'_bp/Eora26_'+eora_years[i]+'_bp_VA.txt'\r\n",
					"\r\n",
					"    fd_matrix = spark.read.load(fd_matrix_path, format='csv', sep=\"\\t\").toPandas().to_numpy(dtype=float)\r\n",
					"    id_matrix = spark.read.load(id_matrix_path, format='csv', sep=\"\\t\").toPandas().to_numpy(dtype=float)\r\n",
					"    va_matrix = spark.read.load(va_matrix_path, format='csv', sep=\"\\t\").toPandas().to_numpy(dtype=float)\r\n",
					"    print(\"Data read for year: \" + eora_years[i])\r\n",
					"\r\n",
					"    # Compute Stats\r\n",
					"    va_total_cs = va_matrix.sum(axis = 0)\r\n",
					"    FD = fd_matrix.reshape((num_cntry*num_sectors + 1), num_fd_components, -1)\r\n",
					"    FD = FD.sum(axis=1)\r\n",
					"    FD = np.squeeze(FD) # Squeeze to remove single-dimensional entries\r\n",
					"\r\n",
					"    GRTR_INT_cs_cs = id_matrix[0:(num_cntry*num_sectors), 0:(num_cntry*num_sectors)]\r\n",
					"    GRTR_FNL_cs_c = FD[0:num_cntry*num_sectors,0:num_cntry]\r\n",
					"    VALUE_cs = va_total_cs[0:(num_cntry*num_sectors)]\r\n",
					"\r\n",
					"    # Initialize empty list to hold blocks\r\n",
					"    imtx_cs_c = []\r\n",
					"    imtx_cs_cs = []\r\n",
					"    imtx_c_cs=[]\r\n",
					"    imtx_cs_ck = []\r\n",
					"\r\n",
					"    # Create block matrix\r\n",
					"    iblk_cs_c = np.ones((num_sectors, 1))  # Create num_sectors x 1 vector of ones\r\n",
					"    iblk_cs_cs = np.ones((num_sectors,num_sectors))\r\n",
					"    ivector = np.ones((1, num_sectors))\r\n",
					"    iblk_cs_ck = np.ones((num_sectors, num_fd_components))\r\n",
					"\r\n",
					"    # Construct block diagonal matrix\r\n",
					"    for j in range(num_cntry):\r\n",
					"        if j == 0:\r\n",
					"            imtx_cs_c = iblk_cs_c  # Initialize with the first block\r\n",
					"            imtx_cs_cs = iblk_cs_cs\r\n",
					"            imtx_c_cs = ivector\r\n",
					"            imtx_cs_ck = iblk_cs_ck\r\n",
					"\r\n",
					"        else:\r\n",
					"            imtx_cs_c = block_diag(imtx_cs_c, iblk_cs_c) \r\n",
					"            imtx_cs_cs = block_diag(imtx_cs_cs, iblk_cs_cs) \r\n",
					"            imtx_c_cs = block_diag(imtx_c_cs, ivector)\r\n",
					"            imtx_cs_ck = block_diag(imtx_cs_ck, iblk_cs_ck)\r\n",
					"\r\n",
					"    imtx_c_c = np.eye(num_cntry)\r\n",
					"\r\n",
					"    #Gross Output\r\n",
					"    GO_cs_c = GRTR_INT_cs_cs.reshape(num_cntry*num_sectors, num_sectors, -1)\r\n",
					"    GO_cs_c = GO_cs_c.sum(axis = 1)\r\n",
					"    GO_cs_c = np.squeeze(GO_cs_c)\r\n",
					"    GO_cs_c = GO_cs_c + GRTR_FNL_cs_c\r\n",
					"    GO_cs = GO_cs_c.sum(axis = 1)\r\n",
					"    GO_c_c = np.matmul(imtx_c_cs,GO_cs_c)\r\n",
					"    elementwise_GO_product =  np.tile(GO_cs[:, np.newaxis],(1,num_cntry)) * imtx_cs_c\r\n",
					"    summed_GO_result = elementwise_GO_product.sum(axis=0)\r\n",
					"    GO_c = summed_GO_result.T\r\n",
					"\r\n",
					"    #Value Added\r\n",
					"    elementwise_VALUE_product = np.tile(VALUE_cs[:, np.newaxis], (1, num_cntry)) * imtx_cs_c\r\n",
					"    summed_VALUE_result = elementwise_VALUE_product.sum(axis=0)\r\n",
					"    VALUE_c = summed_VALUE_result.T\r\n",
					"\r\n",
					"    #Derived value added\r\n",
					"    Inputs_cs = GRTR_INT_cs_cs.sum(axis = 0)\r\n",
					"    replicated_Inputs_cs = np.tile(Inputs_cs[:, np.newaxis], (1, num_cntry)) \r\n",
					"    elementwise_INPUTS_product = replicated_Inputs_cs * imtx_cs_c\r\n",
					"    summed_INPUTS_result = elementwise_INPUTS_product.sum(axis = 0)\r\n",
					"    Inputs_c = summed_INPUTS_result.T\r\n",
					"\r\n",
					"    #VA = Gross Outputs - Inputs\r\n",
					"    VALUE_derived_cs = GO_cs - Inputs_cs\r\n",
					"    replicated_VALUE_derived_cs = np.tile(VALUE_derived_cs[:, np.newaxis], (1, num_cntry))\r\n",
					"    elementwise_VALUE_derived_product = replicated_VALUE_derived_cs * imtx_cs_c\r\n",
					"    summed_VALUE_derived_result = elementwise_VALUE_derived_product.sum(axis = 0)\r\n",
					"    VALUE_derived_c = summed_VALUE_derived_result.T\r\n",
					"\r\n",
					"    #Gross Exports\r\n",
					"    ones_cs_cs_array = np.ones((num_cntry*num_sectors))\r\n",
					"    EXGR_INT_cs_cs = GRTR_INT_cs_cs * (ones_cs_cs_array - imtx_cs_cs)\r\n",
					"\r\n",
					"    EXGR_INT_cs_c = np.full((num_cntry * num_sectors, num_cntry), np.nan)\r\n",
					"    for k in range(num_cntry):\r\n",
					"        EXGR_INT_cs_c[:, k] = np.sum(EXGR_INT_cs_cs[:, (k * num_sectors):(num_sectors * (k + 1))], axis=1)\r\n",
					"\r\n",
					"    EXGR_INT_cs = EXGR_INT_cs_cs.sum(axis = 1)\r\n",
					"\r\n",
					"    replicated_EXGR_INT_cs = np.tile(EXGR_INT_cs[:, np.newaxis], (1, num_cntry))\r\n",
					"    elementwise_EXGR_INT_cs_product = replicated_EXGR_INT_cs * imtx_cs_c\r\n",
					"    summed_EXGR_INT_cs_result = elementwise_EXGR_INT_cs_product.sum(axis = 0)\r\n",
					"    EXGR_INT_c = summed_EXGR_INT_cs_result.T\r\n",
					"\r\n",
					"    ones_cs_c_array = np.ones((num_cntry*num_sectors, num_cntry))\r\n",
					"    EXGR_FNL_cs_c = GRTR_FNL_cs_c * (ones_cs_c_array - imtx_cs_c)\r\n",
					"\r\n",
					"    EXGR_FNL_cs = EXGR_FNL_cs_c * (ones_cs_c_array - imtx_cs_c)\r\n",
					"    EXGR_FNL_cs = EXGR_FNL_cs.sum(axis = 1)\r\n",
					"\r\n",
					"    EXGR_FNL_c = np.tile(EXGR_FNL_cs[:, np.newaxis],(1, num_cntry)) * imtx_cs_c\r\n",
					"    EXGR_FNL_c = EXGR_FNL_c.sum(axis = 0).T\r\n",
					"\r\n",
					"    EXGR_cs_c = EXGR_INT_cs_c + EXGR_FNL_cs_c\r\n",
					"    EXGR_c_c = np.matmul(imtx_c_cs, EXGR_cs_c)\r\n",
					"\r\n",
					"    EXGR_cs = EXGR_INT_cs + EXGR_FNL_cs\r\n",
					"    EXGR_c = EXGR_INT_c + EXGR_FNL_c\r\n",
					"\r\n",
					"    #Gross Imports\r\n",
					"    ones_cs_array = np.ones((num_cntry * num_sectors))\r\n",
					"    IMGR_INT_cs = GRTR_INT_cs_cs * (ones_cs_array - imtx_cs_cs)\r\n",
					"    IMGR_INT_cs = IMGR_INT_cs.sum(axis = 0)\r\n",
					"\r\n",
					"    IMGR_INT_c = np.tile(IMGR_INT_cs[:, np.newaxis],(1, num_cntry)) * imtx_cs_c\r\n",
					"    IMGR_INT_c = IMGR_INT_c.sum(axis = 0).T\r\n",
					"\r\n",
					"    ones_cs_c_array = np.ones((num_cntry * num_sectors, num_cntry))\r\n",
					"    IMGR_FNL_c = GRTR_FNL_cs_c * (ones_cs_c_array - imtx_cs_c)\r\n",
					"    IMGR_FNL_c = IMGR_FNL_c.sum(axis = 0).T\r\n",
					"\r\n",
					"    IMGR_c = IMGR_INT_c + IMGR_FNL_c\r\n",
					"\r\n",
					"    #Gross Trade Balance\r\n",
					"    BALGR_c = EXGR_c - IMGR_c\r\n",
					"\r\n",
					"    #Demand for Domestic Inputs (Use of Domestic Intermediates)\r\n",
					"    DDGR_INT_cs = GRTR_INT_cs_cs * imtx_cs_cs\r\n",
					"    DDGR_INT_cs = DDGR_INT_cs.sum(axis = 0).T\r\n",
					"\r\n",
					"    DDGR_INT_c = np.tile(DDGR_INT_cs[:, np.newaxis],(1, num_cntry)) * imtx_cs_c\r\n",
					"    DDGR_INT_c = DDGR_INT_c.sum(axis = 0).T\r\n",
					"\r\n",
					"    DDGR_FNL_c = GRTR_FNL_cs_c * imtx_cs_c\r\n",
					"    DDGR_FNL_c = DDGR_FNL_c.sum(axis = 0).T\r\n",
					"\r\n",
					"    #Domestic and Foreign Final Demand\r\n",
					"    GRTR_FNL_DOM_cs_c = GRTR_FNL_cs_c * imtx_cs_c\r\n",
					"    GRTR_FNL_DOM_cs = GRTR_FNL_DOM_cs_c.sum(axis = 1)\r\n",
					"\r\n",
					"    #By sector\r\n",
					"    GRTR_FNL_DOM_cs_ck = fd_matrix[0:num_cntry*num_sectors, 0:num_cntry*num_fd_components] * imtx_cs_ck\r\n",
					"\r\n",
					"    ##Sum across the third dimension, across countries for each of the 6 components of final demand\r\n",
					"    GRTR_FNL_DOM_cs_nfd = GRTR_FNL_DOM_cs_ck.reshape((num_cntry*num_sectors), num_fd_components, -1)\r\n",
					"    GRTR_FNL_DOM_cs_nfd = GRTR_FNL_DOM_cs_nfd.sum(axis = 2)\r\n",
					"\r\n",
					"    #Foreign Demand\r\n",
					"    GRTR_FNL_FOR_cs_c = GRTR_FNL_cs_c * (ones_cs_c_array - imtx_cs_c)\r\n",
					"    GRTR_FNL_FOR_cs = GRTR_FNL_FOR_cs_c.sum(axis = 1)\r\n",
					"\r\n",
					"    ##By sector\r\n",
					"    ones_cs_ck_array = np.ones((num_cntry*num_sectors, num_cntry*num_fd_components))\r\n",
					"    GRTR_FNL_FOR_cs_ck = fd_matrix[0:num_cntry*num_sectors, 0:num_cntry*num_fd_components] * (ones_cs_ck_array - imtx_cs_ck)\r\n",
					"\r\n",
					"    ##Sum across the third dimension, across countries for each of the 6 components of final demand\r\n",
					"    GRTR_FNL_FOR_cs_nfd = GRTR_FNL_FOR_cs_ck.reshape((num_cntry*num_sectors), num_fd_components, -1)\r\n",
					"    GRTR_FNL_FOR_cs_nfd = GRTR_FNL_FOR_cs_nfd.sum(axis = 2)\r\n",
					"\r\n",
					"    #VA Vector\r\n",
					"    with warnings.catch_warnings():\r\n",
					"        warnings.simplefilter('ignore')\r\n",
					"        Amat = GRTR_INT_cs_cs / np.tile(GO_cs[:, np.newaxis], (1, num_cntry * num_sectors))\r\n",
					"\r\n",
					"    Amat[np.isnan(Amat)] = 0\r\n",
					"    Amat[np.isinf(Amat)] = 0\r\n",
					"\r\n",
					"    #VA shares\r\n",
					"    va_vec_cs = 1 - np.sum(Amat)\r\n",
					"    V_hat = np.eye((num_cntry * num_sectors)) - np.diag(Amat.sum(axis = 0))\r\n",
					"\r\n",
					"    #Leontief inverse\r\n",
					"    IminusA = np.eye((num_cntry * num_sectors)) - Amat\r\n",
					"    Bmat = np.linalg.inv(IminusA)\r\n",
					"\r\n",
					"    #Total Value Added by country-sector\r\n",
					"    BY = np.matmul(Bmat, GRTR_FNL_cs_c.sum(axis = 1))\r\n",
					"    va_cs = va_vec_cs * BY\r\n",
					"\r\n",
					"    #DVA and FVA of gross exports (From V*B*E)\r\n",
					"    TiVA = V_hat @ Bmat @ np.diag(EXGR_cs)\r\n",
					"\r\n",
					"    EXGR_DVA_cs = np.sum(TiVA * imtx_cs_cs, axis = 0).T\r\n",
					"    EXGR_FVA_cs = np.sum(TiVA * (ones_cs_array - imtx_cs_cs), axis = 0).T\r\n",
					"\r\n",
					"    EXGR_DVA_c = np.tile(EXGR_DVA_cs[:, np.newaxis],(1, num_cntry)) * imtx_cs_c\r\n",
					"    EXGR_DVA_c = EXGR_DVA_c.sum(axis = 0).T\r\n",
					"\r\n",
					"    EXGR_FVA_c = np.tile(EXGR_FVA_cs[:, np.newaxis],(1, num_cntry)) * imtx_cs_c\r\n",
					"    EXGR_FVA_c = EXGR_FVA_c.sum(axis = 0).T\r\n",
					"\r\n",
					"    VS1_cs = np.sum(TiVA * (ones_cs_array - imtx_cs_cs), axis = 1)\r\n",
					"    VS1_c = np.tile(VS1_cs[:, np.newaxis], (1, num_cntry)) * imtx_cs_c\r\n",
					"    VS1_c = VS1_c.sum(axis = 0).T\r\n",
					"\r\n",
					"    #Compute VA matrices (from V*B*Y)\r\n",
					"    VA_cs_c = V_hat @ Bmat @ GRTR_FNL_cs_c\r\n",
					"\r\n",
					"    ones_c_c_array = np.ones((num_cntry, num_cntry))\r\n",
					"    VAX_cs_c = VA_cs_c * (ones_cs_c_array - imtx_cs_c)\r\n",
					"    VA_c_c = np.matmul(imtx_c_cs, VA_cs_c)\r\n",
					"\r\n",
					"    #Value added of exports only (exclude value_added of demestic goods)\r\n",
					"    VAX_c_c = VA_c_c * (ones_c_c_array - np.eye(num_cntry))\r\n",
					"\r\n",
					"    VAX_c = VAX_c_c.sum(axis = 1)\r\n",
					"\r\n",
					"    #Koopman et al. Equation 36 Terms\r\n",
					"    VAX1_cs_c = V_hat @ (Bmat * imtx_cs_cs) @ (GRTR_FNL_cs_c * (ones_cs_c_array - imtx_cs_c))\r\n",
					"    VAX1_c_c = np.matmul(imtx_c_cs, VAX1_cs_c) # aggregate across rows by country\r\n",
					"    VAX1_c = VAX1_c_c.sum(axis = 1)\r\n",
					"\r\n",
					"    VAX2_cs_c = V_hat @ (Bmat * (ones_cs_array - imtx_cs_cs)) @ (GRTR_FNL_cs_c  - imtx_cs_c)\r\n",
					"    VAX2_c_c = np.matmul(imtx_c_cs, VAX2_cs_c) # aggregate across rows by country\r\n",
					"    VAX2_c = VAX2_c_c.sum(axis = 1)\r\n",
					"\r\n",
					"    VAX3_cs_c_sum1 = V_hat @ (Bmat * (ones_cs_array - imtx_cs_cs)) @ (GRTR_FNL_cs_c * (ones_cs_c_array - imtx_cs_c))\r\n",
					"    VAX3_cs_c_sum2 = VAX3_cs_c_sum1 * (ones_cs_c_array - imtx_cs_c)\r\n",
					"    VAX3_c_c = np.matmul(imtx_c_cs, VAX3_cs_c_sum2) # aggregate across rows by country\r\n",
					"    VAX3_c = VAX3_c_c.sum(axis = 1)\r\n",
					"\r\n",
					"    DVA4_cs_c = V_hat @ (Bmat * (ones_cs_array - imtx_cs_cs)) @ (GRTR_FNL_cs_c * (ones_cs_c_array - imtx_cs_c))\r\n",
					"    DVA4_c_c = np.matmul(imtx_c_cs,DVA4_cs_c) * imtx_c_c # aggregate across rows by country, and take just the diagonal elements\r\n",
					"    DVA4_c = DVA4_c_c.sum(axis = 1)\r\n",
					"\r\n",
					"    eye_inverse = np.linalg.inv(np.eye((num_cntry * num_sectors)))\r\n",
					"    DVA5_cs_c = V_hat @ (Bmat * (ones_cs_array - imtx_cs_cs)) @ (Amat * (ones_cs_array - imtx_cs_cs)) @\\\r\n",
					"                ((eye_inverse - Amat) * imtx_cs_cs) @ (GRTR_FNL_cs_c * imtx_cs_c)\r\n",
					"    DVA5_c_c = np.matmul(imtx_c_cs,DVA5_cs_c) * imtx_c_c # aggregate across rows by country, and take just the diagonal elements\r\n",
					"    DVA5_c = DVA5_c_c.sum(axis = 1)\r\n",
					"\r\n",
					"    DVA6_c = EXGR_DVA_c - VAX_c - DVA4_c - DVA5_c\r\n",
					"\r\n",
					"    #Foreign Value Added in Domestic Final Demand\r\n",
					"    DFD_FVA_c = VAX_c_c.sum(axis = 0)\r\n",
					"\r\n",
					"    #Export Country Data\r\n",
					"    print(\"Exporting Country Statistics for year: \" + eora_years[i])\r\n",
					"\r\n",
					"    country_data = {\r\n",
					"    'year': eora_years[i],\r\n",
					"    'gross_output': GO_c,\r\n",
					"    'gross_exports_intermediate': EXGR_INT_c,\r\n",
					"    'gross_exports_final': EXGR_FNL_c,\r\n",
					"    'gross_exports': EXGR_c,\r\n",
					"    'gross_imports_intermediate': IMGR_INT_c,\r\n",
					"    'gross_imports_final': IMGR_FNL_c,\r\n",
					"    'gross_imports': IMGR_c,\r\n",
					"    'gross_trade_balance': BALGR_c,\r\n",
					"    'gross_domestic_demand_intermediate': DDGR_INT_c,\r\n",
					"    'gross_domestic_demand_final': DDGR_FNL_c,\r\n",
					"    'exports_domesitc_value_added': EXGR_DVA_c,\r\n",
					"    'exports_foreign_value_added' : EXGR_FVA_c,\r\n",
					"    'exports_used_for_export_production': VS1_c,\r\n",
					"    'value_added_exports': VAX_c,\r\n",
					"    'foreign_value_added_domestic_demand': DFD_FVA_c,\r\n",
					"    'export_value_added_one': VAX1_c,\r\n",
					"    'export_value_added_two': VAX2_c,\r\n",
					"    'export_value_added_three': VAX3_c,\r\n",
					"    'domestic_value_added_four': DVA4_c,\r\n",
					"    'domestic_value_added_five': DVA5_c,\r\n",
					"    'domestic_value_added_six': DVA6_c,\r\n",
					"    'gross_value_added': VALUE_c,\r\n",
					"    'gross_derived_value_added': VALUE_derived_c\r\n",
					"    }\r\n",
					"\r\n",
					"    country_data_file_path = 'abfss://acj802@ac2synapsedatalabstorage.dfs.core.windows.net/Eora26_Country_Statistics/eora26-country-stats-'+ eora_years[i] +'.csv'\r\n",
					"    country_data_frame = pd.DataFrame(country_data)\r\n",
					"\r\n",
					"    # Convert DataFrame to CSV strings, export to folders\r\n",
					"    country_data_csv_buffer = io.StringIO()\r\n",
					"    country_data_frame.to_csv(country_data_csv_buffer, index=False)\r\n",
					"    country_data_csv_string = country_data_csv_buffer.getvalue()\r\n",
					"    mssparkutils.fs.put(country_data_file_path, country_data_csv_string, overwrite=True)\r\n",
					"\r\n",
					"    #Export Country Sector Data\r\n",
					"    print(\"Exporting Country-Sector Statistics for year: \" + eora_years[i])\r\n",
					"    country_sector_data = {\r\n",
					"    'year': eora_years[i],\r\n",
					"    'gross_output': GO_cs,\r\n",
					"    'gross_exports_intermediate': EXGR_INT_cs,\r\n",
					"    'gross_exports_final': EXGR_FNL_cs,\r\n",
					"    'gross_exports': EXGR_cs,\r\n",
					"    'gross_imports_intermediate': IMGR_INT_cs,\r\n",
					"    'gross_intermediate_domestic_demand': DDGR_INT_cs,\r\n",
					"    'exports_domesitc_value_added': EXGR_DVA_cs,\r\n",
					"    'exports_foreign_value_added': EXGR_FVA_cs,\r\n",
					"    'exports_used_for_export_production': VS1_cs,\r\n",
					"    'gross_value_added': VALUE_cs,\r\n",
					"    'gross_derived_value_added': VALUE_derived_cs\r\n",
					"    }\r\n",
					"\r\n",
					"    country_sector_data_file_path = 'abfss://acj802@ac2synapsedatalabstorage.dfs.core.windows.net/Eora26_Country_Sector_Statistics/eora26-country-sector-stats-'+ eora_years[i] +'.csv' \r\n",
					"    country_sector_data_frame = pd.DataFrame(country_sector_data)\r\n",
					"\r\n",
					"    # Convert DataFrame to CSV strings, export to folders\r\n",
					"    country_sector_data_csv_buffer = io.StringIO()\r\n",
					"    country_sector_data_frame.to_csv(country_sector_data_csv_buffer, index=False)\r\n",
					"    country_sector_data_csv_string = country_sector_data_csv_buffer.getvalue()\r\n",
					"    mssparkutils.fs.put(country_sector_data_file_path, country_sector_data_csv_string, overwrite=True)\r\n",
					"\r\n",
					"print(\"Done!\")\r\n",
					"\r\n",
					"\r\n",
					""
				],
				"execution_count": 2
			}
		]
	}
}