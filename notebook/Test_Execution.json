{
	"name": "Test_Execution",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "ac2sparkpooldev",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "c3591a32-018b-46db-a727-ccb1fa78584a"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/fb276628-ada1-41d2-9fe6-b02c83c5d04e/resourceGroups/ac2-rg-synapse-01/providers/Microsoft.Synapse/workspaces/ac2-synapse-ws-dev/bigDataPools/ac2sparkpooldev",
				"name": "ac2sparkpooldev",
				"type": "Spark",
				"endpoint": "https://ac2-synapse-ws-dev.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ac2sparkpooldev",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"print(\"wakeup\")"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pymrio as pmr"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Masschelin: This seemed to work\r\n",
					"import pandas as pd\r\n",
					"\r\n",
					"py_code = pd.read_csv(\"abfss://acj802@ac2synapsedatalabstorage.dfs.core.windows.net/function.py\", header=None)[0].str.cat(sep='\\n')\r\n",
					"\r\n",
					"#abfss://acj8code@ac2synapsedatalabstorage.dfs.core.windows.net/this5.py\r\n",
					"exec(py_code)\r\n",
					"\r\n",
					"Shane(\"Smith\")"
				],
				"execution_count": 39
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import myWheel as m\r\n",
					""
				],
				"execution_count": 49
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from notebookutils import mssparkutils  \r\n",
					" \r\n",
					"mssparkutils.fs.mount(  \r\n",
					"    \"abfss://acj802@ac2synapsedatalabstorage.dfs.core.windows.net\",  \r\n",
					"    \"/ac2-synapse-ws-dev/libraries/testing-0.1-py3-none-any.whl\",  \r\n",
					"    {\"linkedService\":\"acj802\"}  \r\n",
					") "
				],
				"execution_count": 42
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import sys\r\n",
					"!{sys.executable} -m pip install --upgrade /testing-0.1-py3-none-any.whl\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					""
				],
				"execution_count": 54
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Masschelin:\r\n",
					"\r\n",
					"#String reconstructed from here: hxxps://github.com/MicrosoftDocs/azure-docs/blob/main/articles/synapse-analytics/spark/apache-spark-manage-workspace-packages.md\r\n",
					"#So, for some reason, this lists only a .zip file.\r\n",
					"\r\n",
					"mssparkutils.fs.ls(\"abfss://ac2synapsefiles01@ac2synapsedatalabstorage.dfs.core.windows.net/synapse/workspaces/ac2-synapse-ws-dev/sparkpools/ac2sparkpooldev/libraries/\")\r\n",
					"\r\n",
					"#Readin further down, this apparently is not supported for spark 3.0+\r\n",
					"    # \"This method of managing custom wheel files will not be supported on the Azure Synapse Runtime for Apache Spark 3.0. \r\n",
					"    # Please refer to the Workspace packages feature to manage custom wheel files.\"\r\n",
					"\r\n",
					"# Based upon more google-fu, once its assigned to a pool, its just a import \"name_of_custom_package\""
				],
				"execution_count": 9
			}
		]
	}
}