{
	"name": "EORA_PyMRIO",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "ac2sparkpooldev",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "2521301c-2014-4b40-b888-25a997757bcc"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/fb276628-ada1-41d2-9fe6-b02c83c5d04e/resourceGroups/ac2-rg-synapse-01/providers/Microsoft.Synapse/workspaces/ac2-synapse-ws-dev/bigDataPools/ac2sparkpooldev",
				"name": "ac2sparkpooldev",
				"type": "Spark",
				"endpoint": "https://ac2-synapse-ws-dev.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ac2sparkpooldev",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"!pip install pymrio"
				],
				"execution_count": 110
			},
			{
				"cell_type": "code",
				"source": [
					"print(\"Im Awake\")\r\n",
					"\r\n",
					"import pymrio as pmr\r\n",
					"from notebookutils import mssparkutils\r\n",
					"import os\r\n",
					"import io\r\n",
					"from collections import namedtuple\r\n",
					"import pandas as pd\r\n",
					"import numpy as np\r\n",
					"import plotly.graph_objects as go\r\n",
					"from scipy.linalg import block_diag\r\n",
					"import warnings\r\n",
					"\r\n",
					"pd.set_option('display.max_columns', 30)\r\n",
					"pd.set_option('display.expand_frame_repr', False)\r\n",
					"pd.set_option('max_colwidth', None)"
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def parse_eora_mod(path, year=None, price=\"bp\", country_names=\"eora\"):\r\n",
					"\r\n",
					"    row_name = \"ROW\"\r\n",
					"\r\n",
					"    IDX_NAMES = {\r\n",
					"    \"Z_col\": [\"region\", \"sector\"],\r\n",
					"    \"Z_row\": [\"region\", \"sector\"],\r\n",
					"    \"Z_row_unit\": [\"region\", \"sector\", \"unit\"],\r\n",
					"    \"A_col\": [\"region\", \"sector\"],\r\n",
					"    \"A_row\": [\"region\", \"sector\"],\r\n",
					"    \"A_row_unit\": [\"region\", \"sector\", \"unit\"], \r\n",
					"    \"Y_col1\": [\"region\"],\r\n",
					"    \"Y_col2\": [\"region\", \"category\"],\r\n",
					"    \"Y_row\": [\"region\", \"sector\"],\r\n",
					"    \"Y_row_unit\": [\"region\", \"sector\", \"unit\"],\r\n",
					"    \"F_col\": [\"region\", \"sector\"],\r\n",
					"    \"F_row_single\": [\"stressor\"],\r\n",
					"    \"F_row_unit\": [\"stressor\", \"unit\"],\r\n",
					"    \"F_row_comp_unit\": [\"stressor\", \"compartment\", \"unit\"],\r\n",
					"    \"F_row_src_unit\": [\"stressor\", \"source\", \"unit\"],\r\n",
					"    \"F_row_src\": [\"stressor\", \"source\"],\r\n",
					"    \"VA_row_single\": [\"inputtype\"],\r\n",
					"    \"VA_row_unit\": [\"inputtype\", \"unit\"],\r\n",
					"    \"VA_row_unit_cat\": [\"inputtype\", \"category\"],\r\n",
					"    \"unit\": [\"unit\"],\r\n",
					"    \"_reg_sec_unit\": [\"region\", \"sector\", \"unit\"],\r\n",
					"    }\r\n",
					"\r\n",
					"    #eora file specs\r\n",
					"    eora_sep = \"\\t\"\r\n",
					"    ZY_col = namedtuple(\"ZY\", \"full eora system name\")(0,1,2,3)\r\n",
					"\r\n",
					"    eora_files = {\r\n",
					"    \"Z\": path + \"Eora26_{year}_{price}_T.txt\".format(year=str(year), price=price),\r\n",
					"    \"Q\": path + \"Eora26_{year}_{price}_Q.txt\".format(year=str(year), price=price),\r\n",
					"    \"QY\": path + \"Eora26_{year}_{price}_QY.txt\".format(year=str(year), price=price),\r\n",
					"    \"VA\": path + \"Eora26_{year}_{price}_VA.txt\".format(year=str(year), price=price),\r\n",
					"    \"Y\": path + \"Eora26_{year}_{price}_FD.txt\".format(year=str(year), price=price),\r\n",
					"    \"labels_Z\": path + \"labels_T.txt\",\r\n",
					"    \"labels_Y\": path + \"labels_FD.txt\",\r\n",
					"    \"labels_Q\": path + \"labels_Q.txt\",\r\n",
					"    \"labels_VA\": path + \"labels_VA.txt\"\r\n",
					"    }\r\n",
					"\r\n",
					"    header = namedtuple(\"header\", \"index columns index_names, column_names\")\r\n",
					"\r\n",
					"    eora_header_spec = {\r\n",
					"        \"Z\": header(\r\n",
					"            index=\"labels_Z\",\r\n",
					"            columns=\"labels_Z\",\r\n",
					"            index_names=IDX_NAMES[\"Z_row\"],\r\n",
					"            column_names=IDX_NAMES[\"Z_col\"],\r\n",
					"        ),\r\n",
					"        \"Q\": header(\r\n",
					"            index=\"labels_Q\",\r\n",
					"            columns=\"labels_Z\",\r\n",
					"            index_names=IDX_NAMES[\"F_row_src\"],\r\n",
					"            column_names=IDX_NAMES[\"F_col\"],\r\n",
					"        ),\r\n",
					"        \"QY\": header(\r\n",
					"            index=\"labels_Q\",\r\n",
					"            columns=\"labels_Y\",\r\n",
					"            index_names=IDX_NAMES[\"F_row_src\"],\r\n",
					"            column_names=IDX_NAMES[\"Y_col2\"],\r\n",
					"        ),\r\n",
					"        \"VA\": header(\r\n",
					"            index=\"labels_VA\",\r\n",
					"            columns=\"labels_Z\",\r\n",
					"            index_names=IDX_NAMES[\"VA_row_unit_cat\"],\r\n",
					"            column_names=IDX_NAMES[\"F_col\"],\r\n",
					"        ),\r\n",
					"        \"Y\": header(\r\n",
					"            index=\"labels_Z\",\r\n",
					"            columns=\"labels_Y\",\r\n",
					"            index_names=IDX_NAMES[\"Y_row\"],\r\n",
					"            column_names=IDX_NAMES[\"Y_col2\"],\r\n",
					"        )\r\n",
					"        }\r\n",
					"    \r\n",
					"    if mssparkutils.fs.exists(path):\r\n",
					"        eora_data = {\r\n",
					"            key: (\r\n",
					"                spark.read.load(filepath, format='csv',sep=\"\\t\").toPandas()\r\n",
					"            )\r\n",
					"            for key, filepath in eora_files.items()\r\n",
					"        }\r\n",
					"\r\n",
					"    eora_data['Z'] = eora_data['Z'].astype(\"float\")\r\n",
					"    eora_data['Q'] = eora_data['Q'].astype(\"float\")\r\n",
					"    eora_data['QY'] = eora_data['QY'].astype(\"float\")\r\n",
					"    eora_data['VA'] = eora_data['VA'].astype(\"float\")\r\n",
					"    eora_data['Y'] = eora_data['Y'].astype(\"float\")\r\n",
					"\r\n",
					"    eora_data[\"labels_Z\"] = eora_data[\"labels_Z\"].iloc[\r\n",
					"        :, [getattr(ZY_col, country_names), ZY_col.name]\r\n",
					"    ]\r\n",
					"    eora_data[\"labels_Y\"] = eora_data[\"labels_Y\"].iloc[\r\n",
					"        :, [getattr(ZY_col, country_names), ZY_col.name]\r\n",
					"    ]\r\n",
					"    eora_data[\"labels_VA\"] = eora_data[\"labels_VA\"].iloc[\r\n",
					"        :, : len(eora_header_spec[\"VA\"].column_names)\r\n",
					"    ]\r\n",
					"\r\n",
					"    labQ = eora_data[\"labels_Q\"].iloc[:, : len(eora_header_spec[\"Q\"].column_names)]\r\n",
					"    labQ.columns = IDX_NAMES[\"F_row_src\"]\r\n",
					"    Q_unit = pd.DataFrame(labQ[\"stressor\"].str.extract(r\"\\((.*)\\)\", expand=False))\r\n",
					"    Q_unit.columns = IDX_NAMES[\"unit\"]\r\n",
					"\r\n",
					"    labQ = labQ.copy()\r\n",
					"    labQ.loc[:, \"stressor\"] = labQ[\"stressor\"].str.replace(r\"\\s\\((.*)\\)\", \"\", regex=True)\r\n",
					"    eora_data[\"labels_Q\"] = labQ\r\n",
					"\r\n",
					"    for key in eora_header_spec.keys():\r\n",
					"        eora_data[key].columns = (\r\n",
					"            eora_data[eora_header_spec[key].columns]\r\n",
					"            .set_index(list(eora_data[eora_header_spec[key].columns]))\r\n",
					"            .index\r\n",
					"        )\r\n",
					"        eora_data[key].columns.names = eora_header_spec[key].column_names\r\n",
					"        eora_data[key].index = (\r\n",
					"            eora_data[eora_header_spec[key].index]\r\n",
					"            .set_index(list(eora_data[eora_header_spec[key].index]))\r\n",
					"            .index\r\n",
					"        )\r\n",
					"        eora_data[key].index.names = eora_header_spec[key].index_names\r\n",
					"\r\n",
					"        try:\r\n",
					"            row_mask = ~eora_data[key].index.get_level_values('region').str.startswith(row_name)\r\n",
					"            col_mask = ~eora_data[key].columns.get_level_values('region').str.startswith(row_name)\r\n",
					"            eora_data[key] = eora_data[key].loc[row_mask , :]\r\n",
					"            eora_data[key] = eora_data[key].loc[: , col_mask]\r\n",
					"        except KeyError:\r\n",
					"            pass\r\n",
					"\r\n",
					"    #This is a quick fix to remove all the \"ROW\" columns in these dataframes\r\n",
					"\r\n",
					"    eora_data['Q'] = eora_data['Q'].loc[:,~eora_data['Q'].columns.get_level_values('region').str.startswith(row_name)]\r\n",
					"    eora_data['QY'] = eora_data['QY'].loc[:,~eora_data['QY'].columns.get_level_values('region').str.startswith(row_name)]\r\n",
					"    eora_data['VA'] = eora_data['VA'].loc[:,~eora_data['VA'].columns.get_level_values('region').str.startswith(row_name)]\r\n",
					"\r\n",
					"    \r\n",
					"    Q_unit.index = eora_data[\"Q\"].index\r\n",
					"\r\n",
					"    Z_unit = pd.DataFrame(\r\n",
					"        data=[\"Mill USD\"] * len(eora_data[\"Z\"].index),\r\n",
					"        index=eora_data[\"Z\"].index,\r\n",
					"        columns=[\"unit\"],\r\n",
					"    )\r\n",
					"\r\n",
					"    VA_unit = pd.DataFrame(\r\n",
					"        data=[\"Mill USD\"] * len(eora_data[\"VA\"].index),\r\n",
					"        index=eora_data[\"VA\"].index,\r\n",
					"        columns=[\"unit\"],\r\n",
					"    )\r\n",
					"\r\n",
					"    eora = pmr.IOSystem(\r\n",
					"        Z=eora_data[\"Z\"],\r\n",
					"        Y=eora_data[\"Y\"],\r\n",
					"        unit=Z_unit,\r\n",
					"        Q={\"name\": \"Q\", \"unit\": Q_unit, \"F\": eora_data[\"Q\"], \"F_Y\": eora_data[\"QY\"]},\r\n",
					"        VA={\r\n",
					"            \"name\": \"VA\",\r\n",
					"            \"F\": eora_data[\"VA\"],\r\n",
					"            \"unit\": VA_unit,\r\n",
					"        },\r\n",
					"    )\r\n",
					"\r\n",
					"\r\n",
					"    return(eora)"
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"year = \"2022\"\r\n",
					"price = \"bp\"\r\n",
					"path = 'abfss://acj802@ac2synapsedatalabstorage.dfs.core.windows.net/Eora26_{year}_{price}/'.format(year=year, price=price)\r\n",
					"\r\n",
					"eora_data = parse_eora_mod(path = path, year = year)\r\n",
					"\r\n",
					"eora_data.calc_all()"
				],
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#various variables so I dont have to change them mulitple times. Country values are ISO3 (ISO 3166-1 Alpha-3) country codes. \r\n",
					"Z = eora_data.Z\r\n",
					"Y = eora_data.Y\r\n",
					"\r\n",
					"exporter = 'RUS'\r\n",
					"importer = 'CHN'\r\n",
					"\r\n",
					"country = \"VNM\"\r\n",
					"sector = \"Retail Trade\"\r\n",
					"\r\n",
					"eora26sectors = ['Agriculture', 'Fishing', 'Mining and Quarrying', 'Food & Beverages', 'Textiles and Wearing Apparel', 'Wood and Paper',\r\n",
					" 'Petroleum, Chemical and Non-Metallic Mineral Products', 'Metal Products', 'Electrical and Machinery', 'Transport Equipment', 'Other Manufacturing', 'Recycling',\r\n",
					" 'Electricity, Gas and Water', 'Construction', 'Maintenance and Repair', 'Wholesale Trade', 'Retail Trade', 'Hotels and Restraurants', 'Transport', 'Post and Telecommunications',\r\n",
					" 'Finacial Intermediation and Business Activities', 'Public Administration', 'Education, Health and Other Services', 'Private Households', 'Others',  'Re-export & Re-import']"
				],
				"execution_count": 19
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Z"
				],
				"execution_count": 95
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Country A to Country B Z (T) matrix calc"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"countryZ_row_filter = eora_data.Z.index.get_level_values('region').str.startswith(exporter)\r\n",
					"countryZ_column_filter = eora_data.Z.columns.get_level_values('region').str.startswith(importer)\r\n",
					"\r\n",
					"countryZ = eora_data.Z.loc[countryZ_row_filter, countryZ_column_filter]\r\n",
					"\r\n",
					"pd.DataFrame(data = countryZ)"
				],
				"execution_count": 21
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Country A to Country B Z (T) matrix calc (Row Sums)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"countryZ_row_filter = eora_data.Z.index.get_level_values('region').str.startswith(str(exporter))\r\n",
					"countryZ_column_filter = eora_data.Z.columns.get_level_values('region').str.startswith(str(importer))\r\n",
					"\r\n",
					"countryZ = eora_data.Z.loc[countryZ_row_filter, countryZ_column_filter]\r\n",
					"\r\n",
					"# Calculate row sums\r\n",
					"Zrow_sums = countryZ.sum(axis=1)\r\n",
					"\r\n",
					"# Create a new DataFrame with row sums\r\n",
					"Zrow_sums_df = pd.DataFrame(data = Zrow_sums)\r\n",
					"\r\n",
					"# Rename the column in the new DataFrame\r\n",
					"Zrow_sums_df.columns = [importer]\r\n",
					"Zrow_sums_df"
				],
				"execution_count": 22
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Country A to Country B Y (FD) matrix calc"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"countryY_row_filter = eora_data.Z.index.get_level_values('region').str.startswith(exporter)\r\n",
					"countryY_column_filter = eora_data.Y.columns.get_level_values('region').str.startswith(importer)\r\n",
					"\r\n",
					"countryY = eora_data.Y.loc[countryY_row_filter, countryY_column_filter]\r\n",
					"\r\n",
					"pd.DataFrame(data = countryY)"
				],
				"execution_count": 23
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Country A to Country B Y (FD) matrix calc row sums"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"countryY_row_filter = eora_data.Z.index.get_level_values('region').str.startswith(exporter)\r\n",
					"countryY_column_filter = eora_data.Y.columns.get_level_values('region').str.startswith(importer)\r\n",
					"\r\n",
					"countryY = eora_data.Y.loc[countryY_row_filter, countryY_column_filter]\r\n",
					"\r\n",
					"# Calculate row sums\r\n",
					"Yrow_sums = countryY.sum(axis=1)\r\n",
					"\r\n",
					"# Create a new DataFrame with row sums\r\n",
					"Yrow_sums_df = pd.DataFrame(data = Yrow_sums)\r\n",
					"\r\n",
					"# Rename the column in the new DataFrame\r\n",
					"Yrow_sums_df.columns = [importer]\r\n",
					"Yrow_sums_df"
				],
				"execution_count": 24
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Top 10 countries contriubting agriculture products to the Vietnamese construction sector."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"intermediate_flows = Z.xs((sector, country), level=(\"sector\", \"region\"), axis=1)\r\n",
					"intermediate_flows = intermediate_flows.groupby(level=\"sector\", axis=1).sum()\r\n",
					"\r\n",
					"#Shows all of the flows, from all countries, into X country's sector\r\n",
					"#print(intermediate_flows)\r\n",
					"\r\n",
					"agriculture_flows = Z.xs((sector, sector), level=(\"sector\", \"sector\"), axis=1)\r\n",
					"flowToAgSector = agriculture_flows.loc[(slice(None), sector), :].xs('VNM', level='region', axis=1)\r\n",
					"\r\n",
					"flowToAgSector = flowToAgSector.sort_index()\r\n",
					"flowToAgSector = flowToAgSector.drop(country)\r\n",
					"\r\n",
					"sorted_values = flowToAgSector.sort_values(sector, ascending=False).head(10)\r\n",
					"sorted_values"
				],
				"execution_count": 25
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Sankey chart showing the top 10 contributors of agricultural products to the U.S. agricultural sector."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"labels = sorted_values.index.tolist()\r\n",
					"labels.append(country)\r\n",
					"values = sorted_values[sector].tolist()\r\n",
					"values.append(sorted_values[sector].sum())\r\n",
					"\r\n",
					"source = [i for i in range(len(values) - 1)]\r\n",
					"target = [len(values) - 1] * (len(values) - 1)\r\n",
					"\r\n",
					"data = dict(\r\n",
					"    type='sankey',\r\n",
					"    node=dict(\r\n",
					"      pad=15,\r\n",
					"      thickness=20,\r\n",
					"      line=dict(color=\"black\", width=0.5),\r\n",
					"      label=labels,\r\n",
					"      color=\"blue\"\r\n",
					"    ),\r\n",
					"    link=dict(\r\n",
					"      source=source,\r\n",
					"      target=target,\r\n",
					"      value=values\r\n",
					"  ))\r\n",
					"\r\n",
					"fig = go.Figure(data=[data])\r\n",
					"fig.show()"
				],
				"execution_count": 26
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Parameters\r\n",
					"num_cntry = 189\r\n",
					"num_sectors = 26\r\n",
					"num_fd_components = 6\r\n",
					"year_start = 2022\r\n",
					"year_end = 2022\r\n",
					"\r\n",
					"eora_years = np.linspace(year_start, year_end, num = year_end - year_start + 1).astype(int).astype(str)\r\n",
					"\r\n",
					"for i in range(len(eora_years)):\r\n",
					"    #Read in the data\r\n",
					"    fd_matrix_path = 'abfss://acj802@ac2synapsedatalabstorage.dfs.core.windows.net/Eora26_'+eora_years[i]+'_bp/Eora26_'+eora_years[i]+'_bp_FD.txt'\r\n",
					"    id_matrix_path = 'abfss://acj802@ac2synapsedatalabstorage.dfs.core.windows.net/Eora26_'+eora_years[i]+'_bp/Eora26_'+eora_years[i]+'_bp_T.txt'\r\n",
					"    va_matrix_path = 'abfss://acj802@ac2synapsedatalabstorage.dfs.core.windows.net/Eora26_'+eora_years[i]+'_bp/Eora26_'+eora_years[i]+'_bp_VA.txt'\r\n",
					"\r\n",
					"    fd_matrix = spark.read.load(fd_matrix_path, format='csv', sep=\"\\t\").toPandas().to_numpy(dtype=float)\r\n",
					"    id_matrix = spark.read.load(id_matrix_path, format='csv', sep=\"\\t\").toPandas().to_numpy(dtype=float)\r\n",
					"    va_matrix = spark.read.load(va_matrix_path, format='csv', sep=\"\\t\").toPandas().to_numpy(dtype=float)\r\n",
					"    print(\"Data read for year: \" + eora_years[i])\r\n",
					"\r\n",
					"    # Compute Stats\r\n",
					"    va_total_cs = va_matrix.sum(axis = 0)\r\n",
					"    FD = fd_matrix.reshape((num_cntry*num_sectors + 1), num_fd_components, -1)\r\n",
					"    FD = FD.sum(axis=1)\r\n",
					"    FD = np.squeeze(FD) # Squeeze to remove single-dimensional entries\r\n",
					"\r\n",
					"    GRTR_INT_cs_cs = id_matrix[0:(num_cntry*num_sectors), 0:(num_cntry*num_sectors)]\r\n",
					"    GRTR_FNL_cs_c = FD[0:num_cntry*num_sectors,0:num_cntry]\r\n",
					"    VALUE_cs = va_total_cs[0:(num_cntry*num_sectors)]\r\n",
					"\r\n",
					"    # Initialize empty list to hold blocks\r\n",
					"    imtx_cs_c = []\r\n",
					"    imtx_cs_cs = []\r\n",
					"    imtx_c_cs=[]\r\n",
					"    imtx_cs_ck = []\r\n",
					"\r\n",
					"    # Create block matrix\r\n",
					"    iblk_cs_c = np.ones((num_sectors, 1))  # Create num_sectors x 1 vector of ones\r\n",
					"    iblk_cs_cs = np.ones((num_sectors,num_sectors))\r\n",
					"    ivector = np.ones((1, num_sectors))\r\n",
					"    iblk_cs_ck = np.ones((num_sectors, num_fd_components))\r\n",
					"\r\n",
					"    # Construct block diagonal matrix\r\n",
					"    for j in range(num_cntry):\r\n",
					"        if j == 0:\r\n",
					"            imtx_cs_c = iblk_cs_c  # Initialize with the first block\r\n",
					"            imtx_cs_cs = iblk_cs_cs\r\n",
					"            imtx_c_cs = ivector\r\n",
					"            imtx_cs_ck = iblk_cs_ck\r\n",
					"\r\n",
					"        else:\r\n",
					"            imtx_cs_c = block_diag(imtx_cs_c, iblk_cs_c) \r\n",
					"            imtx_cs_cs = block_diag(imtx_cs_cs, iblk_cs_cs) \r\n",
					"            imtx_c_cs = block_diag(imtx_c_cs, ivector)\r\n",
					"            imtx_cs_ck = block_diag(imtx_cs_ck, iblk_cs_ck)\r\n",
					"\r\n",
					"    imtx_c_c = np.eye(num_cntry)\r\n",
					"\r\n",
					"    #Gross Output\r\n",
					"    GO_cs_c = GRTR_INT_cs_cs.reshape(num_cntry*num_sectors, num_sectors, -1)\r\n",
					"    GO_cs_c = GO_cs_c.sum(axis = 1)\r\n",
					"    GO_cs_c = np.squeeze(GO_cs_c)\r\n",
					"    GO_cs_c = GO_cs_c + GRTR_FNL_cs_c\r\n",
					"    GO_cs = GO_cs_c.sum(axis = 1)\r\n",
					"    GO_c_c = np.matmul(imtx_c_cs,GO_cs_c)\r\n",
					"    elementwise_GO_product =  np.tile(GO_cs[:, np.newaxis],(1,num_cntry)) * imtx_cs_c\r\n",
					"    summed_GO_result = elementwise_GO_product.sum(axis=0)\r\n",
					"    GO_c = summed_GO_result.T\r\n",
					"\r\n",
					"    #Value Added\r\n",
					"    elementwise_VALUE_product = np.tile(VALUE_cs[:, np.newaxis], (1, num_cntry)) * imtx_cs_c\r\n",
					"    summed_VALUE_result = elementwise_VALUE_product.sum(axis=0)\r\n",
					"    VALUE_c = summed_VALUE_result.T\r\n",
					"\r\n",
					"    #Derived value added\r\n",
					"    Inputs_cs = GRTR_INT_cs_cs.sum(axis = 0)\r\n",
					"    replicated_Inputs_cs = np.tile(Inputs_cs[:, np.newaxis], (1, num_cntry)) \r\n",
					"    elementwise_INPUTS_product = replicated_Inputs_cs * imtx_cs_c\r\n",
					"    summed_INPUTS_result = elementwise_INPUTS_product.sum(axis = 0)\r\n",
					"    Inputs_c = summed_INPUTS_result.T\r\n",
					"\r\n",
					"    #VA = Gross Outputs - Inputs\r\n",
					"    VALUE_derived_cs = GO_cs - Inputs_cs\r\n",
					"    replicated_VALUE_derived_cs = np.tile(VALUE_derived_cs[:, np.newaxis], (1, num_cntry))\r\n",
					"    elementwise_VALUE_derived_product = replicated_VALUE_derived_cs * imtx_cs_c\r\n",
					"    summed_VALUE_derived_result = elementwise_VALUE_derived_product.sum(axis = 0)\r\n",
					"    VALUE_derived_c = summed_VALUE_derived_result.T\r\n",
					"\r\n",
					"    #Gross Exports\r\n",
					"    ones_cs_cs_array = np.ones((num_cntry*num_sectors))\r\n",
					"    EXGR_INT_cs_cs = GRTR_INT_cs_cs * (ones_cs_cs_array - imtx_cs_cs)\r\n",
					"\r\n",
					"    EXGR_INT_cs_c = np.full((num_cntry * num_sectors, num_cntry), np.nan)\r\n",
					"    for k in range(num_cntry):\r\n",
					"        EXGR_INT_cs_c[:, k] = np.sum(EXGR_INT_cs_cs[:, (k * num_sectors):(num_sectors * (k + 1))], axis=1)\r\n",
					"\r\n",
					"    EXGR_INT_cs = EXGR_INT_cs_cs.sum(axis = 1)\r\n",
					"\r\n",
					"    replicated_EXGR_INT_cs = np.tile(EXGR_INT_cs[:, np.newaxis], (1, num_cntry))\r\n",
					"    elementwise_EXGR_INT_cs_product = replicated_EXGR_INT_cs * imtx_cs_c\r\n",
					"    summed_EXGR_INT_cs_result = elementwise_EXGR_INT_cs_product.sum(axis = 0)\r\n",
					"    EXGR_INT_c = summed_EXGR_INT_cs_result.T\r\n",
					"\r\n",
					"    ones_cs_c_array = np.ones((num_cntry*num_sectors, num_cntry))\r\n",
					"    EXGR_FNL_cs_c = GRTR_FNL_cs_c * (ones_cs_c_array - imtx_cs_c)\r\n",
					"\r\n",
					"    EXGR_FNL_cs = EXGR_FNL_cs_c * (ones_cs_c_array - imtx_cs_c)\r\n",
					"    EXGR_FNL_cs = EXGR_FNL_cs.sum(axis = 1)\r\n",
					"\r\n",
					"    EXGR_FNL_c = np.tile(EXGR_FNL_cs[:, np.newaxis],(1, num_cntry)) * imtx_cs_c\r\n",
					"    EXGR_FNL_c = EXGR_FNL_c.sum(axis = 0).T\r\n",
					"\r\n",
					"    EXGR_cs_c = EXGR_INT_cs_c + EXGR_FNL_cs_c\r\n",
					"    EXGR_c_c = np.matmul(imtx_c_cs, EXGR_cs_c)\r\n",
					"\r\n",
					"    EXGR_cs = EXGR_INT_cs + EXGR_FNL_cs\r\n",
					"    EXGR_c = EXGR_INT_c + EXGR_FNL_c\r\n",
					"\r\n",
					"    #Gross Imports\r\n",
					"    ones_cs_array = np.ones((num_cntry * num_sectors))\r\n",
					"    IMGR_INT_cs = GRTR_INT_cs_cs * (ones_cs_array - imtx_cs_cs)\r\n",
					"    IMGR_INT_cs = IMGR_INT_cs.sum(axis = 0)\r\n",
					"\r\n",
					"    IMGR_INT_c = np.tile(IMGR_INT_cs[:, np.newaxis],(1, num_cntry)) * imtx_cs_c\r\n",
					"    IMGR_INT_c = IMGR_INT_c.sum(axis = 0).T\r\n",
					"\r\n",
					"    ones_cs_c_array = np.ones((num_cntry * num_sectors, num_cntry))\r\n",
					"    IMGR_FNL_c = GRTR_FNL_cs_c * (ones_cs_c_array - imtx_cs_c)\r\n",
					"    IMGR_FNL_c = IMGR_FNL_c.sum(axis = 0).T\r\n",
					"\r\n",
					"    IMGR_c = IMGR_INT_c + IMGR_FNL_c\r\n",
					"\r\n",
					"    #Gross Trade Balance\r\n",
					"    BALGR_c = EXGR_c - IMGR_c\r\n",
					"\r\n",
					"    #Demand for Domestic Inputs (Use of Domestic Intermediates)\r\n",
					"    DDGR_INT_cs = GRTR_INT_cs_cs * imtx_cs_cs\r\n",
					"    DDGR_INT_cs = DDGR_INT_cs.sum(axis = 0).T\r\n",
					"\r\n",
					"    DDGR_INT_c = np.tile(DDGR_INT_cs[:, np.newaxis],(1, num_cntry)) * imtx_cs_c\r\n",
					"    DDGR_INT_c = DDGR_INT_c.sum(axis = 0).T\r\n",
					"\r\n",
					"    DDGR_FNL_c = GRTR_FNL_cs_c * imtx_cs_c\r\n",
					"    DDGR_FNL_c = DDGR_FNL_c.sum(axis = 0).T\r\n",
					"\r\n",
					"    #Domestic and Foreign Final Demand\r\n",
					"    GRTR_FNL_DOM_cs_c = GRTR_FNL_cs_c * imtx_cs_c\r\n",
					"    GRTR_FNL_DOM_cs = GRTR_FNL_DOM_cs_c.sum(axis = 1)\r\n",
					"\r\n",
					"    #By sector\r\n",
					"    GRTR_FNL_DOM_cs_ck = fd_matrix[0:num_cntry*num_sectors, 0:num_cntry*num_fd_components] * imtx_cs_ck\r\n",
					"\r\n",
					"    ##Sum across the third dimension, across countries for each of the 6 components of final demand\r\n",
					"    GRTR_FNL_DOM_cs_nfd = GRTR_FNL_DOM_cs_ck.reshape((num_cntry*num_sectors), num_fd_components, -1)\r\n",
					"    GRTR_FNL_DOM_cs_nfd = GRTR_FNL_DOM_cs_nfd.sum(axis = 2)\r\n",
					"\r\n",
					"    #Foreign Demand\r\n",
					"    GRTR_FNL_FOR_cs_c = GRTR_FNL_cs_c * (ones_cs_c_array - imtx_cs_c)\r\n",
					"    GRTR_FNL_FOR_cs = GRTR_FNL_FOR_cs_c.sum(axis = 1)\r\n",
					"\r\n",
					"    ##By sector\r\n",
					"    ones_cs_ck_array = np.ones((num_cntry*num_sectors, num_cntry*num_fd_components))\r\n",
					"    GRTR_FNL_FOR_cs_ck = fd_matrix[0:num_cntry*num_sectors, 0:num_cntry*num_fd_components] * (ones_cs_ck_array - imtx_cs_ck)\r\n",
					"\r\n",
					"    ##Sum across the third dimension, across countries for each of the 6 components of final demand\r\n",
					"    GRTR_FNL_FOR_cs_nfd = GRTR_FNL_FOR_cs_ck.reshape((num_cntry*num_sectors), num_fd_components, -1)\r\n",
					"    GRTR_FNL_FOR_cs_nfd = GRTR_FNL_FOR_cs_nfd.sum(axis = 2)\r\n",
					"\r\n",
					"    #VA Vector\r\n",
					"    with warnings.catch_warnings():\r\n",
					"        warnings.simplefilter('ignore')\r\n",
					"        Amat = GRTR_INT_cs_cs / np.tile(GO_cs[:, np.newaxis], (1, num_cntry * num_sectors))\r\n",
					"\r\n",
					"    Amat[np.isnan(Amat)] = 0\r\n",
					"    Amat[np.isinf(Amat)] = 0\r\n",
					"\r\n",
					"    #VA shares\r\n",
					"    va_vec_cs = 1 - np.sum(Amat)\r\n",
					"    V_hat = np.eye((num_cntry * num_sectors)) - np.diag(Amat.sum(axis = 0))\r\n",
					"\r\n",
					"    #Leontief inverse\r\n",
					"    IminusA = np.eye((num_cntry * num_sectors)) - Amat\r\n",
					"    Bmat = np.linalg.inv(IminusA)\r\n",
					"\r\n",
					"    #Total Value Added by country-sector\r\n",
					"    BY = np.matmul(Bmat, GRTR_FNL_cs_c.sum(axis = 1))\r\n",
					"    va_cs = va_vec_cs * BY\r\n",
					"\r\n",
					"    #DVA and FVA of gross exports (From V*B*E)\r\n",
					"    TiVA = V_hat @ Bmat @ np.diag(EXGR_cs)\r\n",
					"\r\n",
					"    EXGR_DVA_cs = np.sum(TiVA * imtx_cs_cs, axis = 0).T\r\n",
					"    EXGR_FVA_cs = np.sum(TiVA * (ones_cs_array - imtx_cs_cs), axis = 0).T\r\n",
					"\r\n",
					"    EXGR_DVA_c = np.tile(EXGR_DVA_cs[:, np.newaxis],(1, num_cntry)) * imtx_cs_c\r\n",
					"    EXGR_DVA_c = EXGR_DVA_c.sum(axis = 0).T\r\n",
					"\r\n",
					"    EXGR_FVA_c = np.tile(EXGR_FVA_cs[:, np.newaxis],(1, num_cntry)) * imtx_cs_c\r\n",
					"    EXGR_FVA_c = EXGR_FVA_c.sum(axis = 0).T\r\n",
					"\r\n",
					"    VS1_cs = np.sum(TiVA * (ones_cs_array - imtx_cs_cs), axis = 1)\r\n",
					"    VS1_c = np.tile(VS1_cs[:, np.newaxis], (1, num_cntry)) * imtx_cs_c\r\n",
					"    VS1_c = VS1_c.sum(axis = 0).T\r\n",
					"\r\n",
					"    #Compute VA matrices (from V*B*Y)\r\n",
					"    VA_cs_c = V_hat @ Bmat @ GRTR_FNL_cs_c\r\n",
					"\r\n",
					"    ones_c_c_array = np.ones((num_cntry, num_cntry))\r\n",
					"    VAX_cs_c = VA_cs_c * (ones_cs_c_array - imtx_cs_c)\r\n",
					"    VA_c_c = np.matmul(imtx_c_cs, VA_cs_c)\r\n",
					"\r\n",
					"    #Value added of exports only (exclude value_added of demestic goods)\r\n",
					"    VAX_c_c = VA_c_c * (ones_c_c_array - np.eye(num_cntry))\r\n",
					"\r\n",
					"    VAX_c = VAX_c_c.sum(axis = 1)\r\n",
					"\r\n",
					"    #Koopman et al. Equation 36 Terms\r\n",
					"    VAX1_cs_c = V_hat @ (Bmat * imtx_cs_cs) @ (GRTR_FNL_cs_c * (ones_cs_c_array - imtx_cs_c))\r\n",
					"    VAX1_c_c = np.matmul(imtx_c_cs, VAX1_cs_c) # aggregate across rows by country\r\n",
					"    VAX1_c = VAX1_c_c.sum(axis = 1)\r\n",
					"\r\n",
					"    VAX2_cs_c = V_hat @ (Bmat * (ones_cs_array - imtx_cs_cs)) @ (GRTR_FNL_cs_c  - imtx_cs_c)\r\n",
					"    VAX2_c_c = np.matmul(imtx_c_cs, VAX2_cs_c) # aggregate across rows by country\r\n",
					"    VAX2_c = VAX2_c_c.sum(axis = 1)\r\n",
					"\r\n",
					"    VAX3_cs_c_sum1 = V_hat @ (Bmat * (ones_cs_array - imtx_cs_cs)) @ (GRTR_FNL_cs_c * (ones_cs_c_array - imtx_cs_c))\r\n",
					"    VAX3_cs_c_sum2 = VAX3_cs_c_sum1 * (ones_cs_c_array - imtx_cs_c)\r\n",
					"    VAX3_c_c = np.matmul(imtx_c_cs, VAX3_cs_c_sum2) # aggregate across rows by country\r\n",
					"    VAX3_c = VAX3_c_c.sum(axis = 1)\r\n",
					"\r\n",
					"    DVA4_cs_c = V_hat @ (Bmat * (ones_cs_array - imtx_cs_cs)) @ (GRTR_FNL_cs_c * (ones_cs_c_array - imtx_cs_c))\r\n",
					"    DVA4_c_c = np.matmul(imtx_c_cs,DVA4_cs_c) * imtx_c_c # aggregate across rows by country, and take just the diagonal elements\r\n",
					"    DVA4_c = DVA4_c_c.sum(axis = 1)\r\n",
					"\r\n",
					"    eye_inverse = np.linalg.inv(np.eye((num_cntry * num_sectors)))\r\n",
					"    DVA5_cs_c = V_hat @ (Bmat * (ones_cs_array - imtx_cs_cs)) @ (Amat * (ones_cs_array - imtx_cs_cs)) @\\\r\n",
					"                ((eye_inverse - Amat) * imtx_cs_cs) @ (GRTR_FNL_cs_c * imtx_cs_c)\r\n",
					"    DVA5_c_c = np.matmul(imtx_c_cs,DVA5_cs_c) * imtx_c_c # aggregate across rows by country, and take just the diagonal elements\r\n",
					"    DVA5_c = DVA5_c_c.sum(axis = 1)\r\n",
					"\r\n",
					"    DVA6_c = EXGR_DVA_c - VAX_c - DVA4_c - DVA5_c\r\n",
					"\r\n",
					"    #Foreign Value Added in Domestic Final Demand\r\n",
					"    DFD_FVA_c = VAX_c_c.sum(axis = 0)\r\n",
					"\r\n",
					"print(\"Done!\")"
				],
				"execution_count": 27
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Gross Exports by sector per country "
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"countrySectorExports = pd.DataFrame(EXGR_cs_c)\r\n",
					"countryCountryExports = pd.DataFrame(EXGR_c_c)\r\n",
					"\r\n",
					"countrySectorLabels = spark.read.load('abfss://acj802@ac2synapsedatalabstorage.dfs.core.windows.net/EORA_Labels/Country+Sector_Labels.csv', format='csv', sep=\"\\t\").toPandas()\r\n",
					"countryLabels = spark.read.load('abfss://acj802@ac2synapsedatalabstorage.dfs.core.windows.net/EORA_Labels/country-labels.csv', format='csv', sep=\"\\t\").toPandas()"
				],
				"execution_count": 28
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"countryCountryExports.sum(axis = 1)"
				],
				"execution_count": 29
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"countrySectorExports.set_axis(countryLabels.values.squeeze(), axis = 1, inplace = True)\r\n",
					"\r\n",
					"countrySectorLabels = countrySectorLabels.iloc[1:]\r\n",
					"countrySectorLabels = countrySectorLabels.reset_index(drop = True)\r\n",
					"countrySectorExports = countrySectorExports.assign(_c0 = countrySectorLabels['_c0'])\r\n",
					"\r\n",
					"countrySectorExports = countrySectorExports.reindex(columns =[countrySectorExports.columns[-1]] + countrySectorExports.columns[:-1].tolist())\r\n",
					"\r\n",
					"countrySectorExports['_c0'] = countrySectorExports['_c0'].str.replace('Industries, ', '')\r\n",
					"countrySectorExports['_c0'] = countrySectorExports['_c0'].str.replace('Commodities, ', '')"
				],
				"execution_count": 30
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"countryCountryExports.set_axis(countryLabels.values.squeeze(), axis = 1, inplace = True)\r\n",
					"countryCountryExports = countryCountryExports.assign(_c0 = countryLabels['_c0'])\r\n",
					"countryCountryExports = countryCountryExports.reindex(columns = [countryCountryExports.columns[-1]] + countryCountryExports.columns[:-1].tolist())\r\n",
					"countryCountryExports.set_index('_c0', inplace = True)"
				],
				"execution_count": 31
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"First up is finding out what are the most \"valuable\" export sectors for each country (Percentage)."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Splitting these out so that I can do a match between the two dataframes\r\n",
					"countrySectorExports[['Country_Code', 'Industry']] = countrySectorExports['_c0'].str.split(', ', n=1, expand=True)\r\n",
					"\r\n",
					"#Setting the index for both equal to the country codes\r\n",
					"countrySectorExports.set_index('Country_Code', inplace = True)\r\n",
					"\r\n",
					"#Saving this to put it back in later\r\n",
					"c0 = pd.DataFrame(countrySectorExports['_c0'])\r\n",
					"\r\n",
					"countrySectorExports = countrySectorExports.drop(['_c0', 'Industry'], axis = 1)\r\n",
					"\r\n",
					"countryCountryExports_repeated = countryCountryExports.reindex(countryCountryExports.index.repeat(26))\r\n",
					"countrySectorExportsPercentOfTotal = (countrySectorExports/ countryCountryExports_repeated) * 100\r\n",
					"countrySectorExportsPercentOfTotal = countrySectorExportsPercentOfTotal.reindex(columns=countrySectorExports.columns)\r\n",
					"\r\n",
					"countrySectorExportsPercentOfTotal = countrySectorExportsPercentOfTotal.assign(Country_Industry = c0['_c0'])\r\n",
					"countrySectorExportsPercentOfTotal = countrySectorExportsPercentOfTotal.reindex(columns=[countrySectorExportsPercentOfTotal.columns[-1]] + countrySectorExportsPercentOfTotal.columns[:-1].tolist())\r\n",
					"countrySectorExportsPercentOfTotal.set_index('Country_Industry', inplace = True)"
				],
				"execution_count": 32
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"(Assuming I'm doing this right) This shows, in percentage terms, where the bulk of trade flows between DEU and BEL are."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mask_rows = countrySectorExportsPercentOfTotal.index.str.contains(\"DEU\")\r\n",
					"mask_cols = ['BEL' in col for col in countrySectorExportsPercentOfTotal.columns]\r\n",
					"\r\n",
					"filtered_df = countrySectorExportsPercentOfTotal.loc[mask_rows, mask_cols]\r\n",
					"pd.set_option('display.float_format', lambda x: '{:.3f}'.format(x))\r\n",
					"filtered_df"
				],
				"execution_count": 33
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"And now gross imports per sector for each country"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Gross imports by sector for each country\r\n",
					"countrySectorImports = pd.DataFrame(IMGR_INT_cs)\r\n",
					"countrySectorImports = countrySectorImports.assign(_c0 = countrySectorLabels['_c0'])\r\n",
					"countrySectorImports = countrySectorImports.reindex(columns =[countrySectorImports.columns[-1]] + countrySectorImports.columns[:-1].tolist())"
				],
				"execution_count": 34
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"countrySectorImports['_c0'] = countrySectorImports['_c0'].str.replace('Industries, ', '')\r\n",
					"countrySectorImports['_c0'] = countrySectorImports['_c0'].str.replace('Commodities, ', '')"
				],
				"execution_count": 35
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"countrySectorImports[['Country_Code', 'Industry']] = countrySectorImports['_c0'].str.split(', ', n=1, expand=True)\r\n",
					"countrySectorImports = countrySectorImports.drop(['_c0', 'Industry'], axis = 1)\r\n",
					"countrySectorImports = countrySectorImports.reindex(columns =[countrySectorImports.columns[-1]] + countrySectorImports.columns[:-1].tolist())\r\n",
					"countrySectorImports.set_index('Country_Code', inplace = True)"
				],
				"execution_count": 36
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"countryGrossImports = pd.DataFrame(IMGR_c)\r\n",
					"countryGrossImports = countryGrossImports.set_index(countryLabels['_c0'])"
				],
				"execution_count": 37
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"countryGrossImports_repeated = countryGrossImports.reindex(countryGrossImports.index.repeat(26))\r\n",
					"countrySectorImportsPercentOfTotal = (countrySectorImports/ countryGrossImports_repeated) * 100\r\n",
					"countrySectorImportsPercentOfTotal = countrySectorImportsPercentOfTotal.assign(Country_Industry = c0['_c0'])\r\n",
					"countrySectorImportsPercentOfTotal.set_index('Country_Industry', inplace = True)"
				],
				"execution_count": 38
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mask_rows = countrySectorImportsPercentOfTotal.index.str.contains(\"CHN\")\r\n",
					"\r\n",
					"filtered_df = countrySectorImportsPercentOfTotal.loc[mask_rows, :]\r\n",
					"pd.set_option('display.float_format', lambda x: '{:.3f}'.format(x))\r\n",
					"filtered_df"
				],
				"execution_count": 39
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"I want to calculate the value contributed of a country's sector to another.\r\n",
					"\r\n",
					"Example: I want to find out the value contributed of Venezulean oil to country A.\r\n",
					"- I have the gross imports of oil of a country (country sector imports)\r\n",
					"- The total consumption of imported oil from Venezuela to country A should be the row sum of the FD + the row sum of T.\r\n",
					"- I can calculate from this, how much oil is \"Venezuelan\" (sum of imported oil/gross imports of oil)\r\n",
					"\r\n",
					"- Cost of a sector: columnsum of intermediate matrix\r\n",
					"- Total value: gross output of the sector\r\n",
					"- Profit: total - cost"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def importRelianceCalculator(exporter, importer, sector):\r\n",
					"    countrySectorImports = pd.DataFrame(IMGR_INT_cs)\r\n",
					"    countrySectorImports = countrySectorImports.assign(_c0 = countrySectorLabels['_c0'])\r\n",
					"    countrySectorImports = countrySectorImports.reindex(columns =[countrySectorImports.columns[-1]] + countrySectorImports.columns[:-1].tolist())\r\n",
					"\r\n",
					"    countrySectorImportsLabels = ['Country_Sector', 'Value']\r\n",
					"    countrySectorImports = countrySectorImports.rename(columns={countrySectorImports.columns[i]: countrySectorImportsLabels[i] for i in range(len(countrySectorImports.columns))})\r\n",
					"\r\n",
					"    countrySectorImports[['Country_Code', 'Sector']] = countrySectorImports['Country_Sector'].str.split(', ', n=1, expand=True)\r\n",
					"    countrySectorImports.drop(['Country_Sector'], axis = 1, inplace = True)\r\n",
					"    countrySectorImports = countrySectorImports[['Country_Code', 'Sector', 'Value']]\r\n",
					"    countrySectorImports['Sector'] = countrySectorImports['Sector'].str.replace('Industries, ', '')\r\n",
					"    countrySectorImports['Sector'] = countrySectorImports['Sector'].str.replace('Commodities, ', '')\r\n",
					" \r\n",
					"    countryZ_row_filter = eora_data.Z.index.get_level_values('region').str.startswith(str(exporter))\r\n",
					"    countryZ_column_filter = eora_data.Z.columns.get_level_values('region').str.startswith(str(importer))\r\n",
					"\r\n",
					"    countryZ = eora_data.Z.loc[countryZ_row_filter, countryZ_column_filter]\r\n",
					"\r\n",
					"    Zrow_sums = countryZ.sum(axis=1)\r\n",
					"\r\n",
					"    Zrow_sums_df = pd.DataFrame(data = Zrow_sums)\r\n",
					"\r\n",
					"    Zrow_sums_df.columns = [importer]\r\n",
					"\r\n",
					"    countryY_row_filter = eora_data.Z.index.get_level_values('region').str.startswith(str(exporter))\r\n",
					"    countryY_column_filter = eora_data.Y.columns.get_level_values('region').str.startswith(str(importer))\r\n",
					"\r\n",
					"    countryY = eora_data.Y.loc[countryY_row_filter, countryY_column_filter]\r\n",
					"\r\n",
					"    Yrow_sums = countryY.sum(axis=1)\r\n",
					"\r\n",
					"    Yrow_sums_df = pd.DataFrame(data = Yrow_sums)\r\n",
					"\r\n",
					"    Yrow_sums_df.columns = [importer]\r\n",
					"\r\n",
					"    Zspecific_index = (str(exporter), str(sector))\r\n",
					"    Zvalue = Zrow_sums_df.xs(Zspecific_index, level=('region', 'sector'))[str(importer)]\r\n",
					"\r\n",
					"    Yspecific_index = (str(exporter), str(sector))\r\n",
					"    Yvalue = Yrow_sums_df.xs(Yspecific_index, level=('region', 'sector'))[str(importer)]\r\n",
					"\r\n",
					"    sectorImport = Zvalue.values[0] + Yvalue.values[0]\r\n",
					"\r\n",
					"    mask = (countrySectorImports['Country_Code'] == str(importer)) & (countrySectorImports['Sector'] == str(sector))\r\n",
					"    filteredGrossSectorImport = countrySectorImports.loc[mask]\r\n",
					"    shareOfImport = filteredGrossSectorImport['Value']\r\n",
					"    shareOfImport = shareOfImport.values[0]\r\n",
					"\r\n",
					"    importReliance = (sectorImport / shareOfImport)\r\n",
					"    pd.set_option('display.float_format', lambda x: '{:.3f}'.format(x))\r\n",
					"    return importReliance"
				],
				"execution_count": 40
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"importRelianceCalculator('RUS', 'CHN', 'Petroleum, Chemical and Non-Metallic Mineral Products')"
				],
				"execution_count": 41
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"countryZ_row_filter = eora_data.Z.index.get_level_values('region').str.startswith('RUS')\r\n",
					"countryZ_column_filter = eora_data.Z.columns.get_level_values('region').str.startswith('CHN')\r\n",
					"\r\n",
					"countryZ = eora_data.Z.loc[countryZ_row_filter, countryZ_column_filter]\r\n",
					"Zcolumn_sums = pd.DataFrame(countryZ.sum(axis=0), columns = ['value'])\r\n",
					"Zcolumn_sums.index.get_level_values('sector').str.contains('Petroleum, Chemical and Non-Metallic Mineral Products')\r\n",
					"\r\n",
					"importCost = Zcolumn_sums.loc[Zcolumn_sums.index.get_level_values('sector').str.contains('Petroleum, Chemical and Non-Metallic Mineral Products'), 'value'].values[0]\r\n",
					"importCost"
				],
				"execution_count": 42
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"countrySectorExports = countrySectorExports.loc[countrySectorExports.index.str.contains(\"CHN\")]\r\n",
					"countryTotalExports = countrySectorExports.drop('CHN', axis = 1)\r\n",
					"countryTotalExports = pd.DataFrame(countryTotalExports.sum(axis = 1), columns = ['Value'])"
				],
				"execution_count": 43
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"exporterValue = countryTotalExports['Value'].apply(lambda x: x * (importRelianceCalculator('RUS', 'CHN', 'Petroleum, Chemical and Non-Metallic Mineral Products')))\r\n",
					"exporterValue = pd.DataFrame(exporterValue, columns = ['Value'])"
				],
				"execution_count": 44
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"- $A = GrossOutputs_{Sector}$\r\n",
					"- $B = \\sum_{col} Sector$\r\n",
					"- $C = Z_{CountryA, Country B} / B$\r\n",
					"- $ Result = \\sum \\limits _{Sector 1} ^{Sector 26}[(A-B)*C]$"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Data Import and Prep. THIS ONE WORKS. USE IT.\r\n",
					"Z = eora_data.Z\r\n",
					"\r\n",
					"importer = 'BEL'\r\n",
					"exporter = 'DEU'\r\n",
					"sector = 'Transport'\r\n",
					"\r\n",
					"countrySectorGrossOutput = pd.DataFrame(GO_cs)\r\n",
					"\r\n",
					"countrySectorLabels = spark.read.load('abfss://acj802@ac2synapsedatalabstorage.dfs.core.windows.net/EORA_Labels/Country+Sector_Labels.csv', format='csv', sep=\"\\t\").toPandas()\r\n",
					"countryLabels = spark.read.load('abfss://acj802@ac2synapsedatalabstorage.dfs.core.windows.net/EORA_Labels/country-labels.csv', format='csv', sep=\"\\t\").toPandas()\r\n",
					"\r\n",
					"countrySectorLabels = countrySectorLabels.iloc[1:]\r\n",
					"countrySectorLabels = countrySectorLabels.reset_index(drop = True)\r\n",
					"countrySectorGrossOutput  = countrySectorGrossOutput .assign(_c0 = countrySectorLabels['_c0'])\r\n",
					"\r\n",
					"countrySectorGrossOutput  = countrySectorGrossOutput .reindex(columns =[countrySectorGrossOutput .columns[-1]] + countrySectorGrossOutput .columns[:-1].tolist())\r\n",
					"\r\n",
					"countrySectorGrossOutput ['_c0'] = countrySectorGrossOutput ['_c0'].str.replace('Industries, ', '')\r\n",
					"countrySectorGrossOutput ['_c0'] = countrySectorGrossOutput ['_c0'].str.replace('Commodities, ', '')\r\n",
					"\r\n",
					"countrySectorGrossOutput [['country_code', 'sector']] = countrySectorGrossOutput['_c0'].str.split(', ', expand=True,n=1)\r\n",
					"countrySectorGrossOutput = countrySectorGrossOutput .drop('_c0', axis=1)\r\n",
					"\r\n",
					"countrySectorGrossOutput  = countrySectorGrossOutput .rename(columns={0: 'Value'})\r\n",
					"countrySectorGrossOutput  = countrySectorGrossOutput .reindex(columns=['country_code', 'sector', 'Value'])\r\n",
					"\r\n",
					"countrySectorGrossOutput "
				],
				"execution_count": 45
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Gross Exports Data Import and Prep. THIS ONE WORKS. USE IT.\r\n",
					"Z = eora_data.Z\r\n",
					"importer = 'BEL'\r\n",
					"exporter = 'DEU'\r\n",
					"sector = 'Transport'\r\n",
					"\r\n",
					"countrySectorGrossExports = pd.DataFrame(EXGR_cs)\r\n",
					"\r\n",
					"countrySectorLabels = spark.read.load('abfss://acj802@ac2synapsedatalabstorage.dfs.core.windows.net/EORA_Labels/Country+Sector_Labels.csv', format='csv', sep=\"\\t\").toPandas()\r\n",
					"countryLabels = spark.read.load('abfss://acj802@ac2synapsedatalabstorage.dfs.core.windows.net/EORA_Labels/country-labels.csv', format='csv', sep=\"\\t\").toPandas()\r\n",
					"\r\n",
					"countrySectorLabels = countrySectorLabels.iloc[1:]\r\n",
					"countrySectorLabels = countrySectorLabels.reset_index(drop = True)\r\n",
					"countrySectorGrossExports = countrySectorGrossExports.assign(_c0 = countrySectorLabels['_c0'])\r\n",
					"\r\n",
					"countrySectorGrossExports = countrySectorGrossExports.reindex(columns =[countrySectorGrossExports.columns[-1]] + countrySectorGrossExports.columns[:-1].tolist())\r\n",
					"\r\n",
					"countrySectorGrossExports['_c0'] = countrySectorGrossExports['_c0'].str.replace('Industries, ', '')\r\n",
					"countrySectorGrossExports['_c0'] = countrySectorGrossExports['_c0'].str.replace('Commodities, ', '')\r\n",
					"\r\n",
					"countrySectorGrossExports[['country_code', 'sector']] = countrySectorGrossExports['_c0'].str.split(', ', expand=True,n=1)\r\n",
					"countrySectorGrossExports = countrySectorGrossExports.drop('_c0', axis=1)\r\n",
					"\r\n",
					"countrySectorGrossExports = countrySectorGrossExports.rename(columns={0: 'Value'})\r\n",
					"countrySectorGrossExports = countrySectorGrossExports.reindex(columns=['country_code', 'sector', 'Value'])\r\n",
					"\r\n",
					"countrySectorGrossExports"
				],
				"execution_count": 46
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Equation A, Gross Ouputs\r\n",
					"countrySectorGrossOutputValue = countrySectorGrossOutput.loc[(countrySectorGrossOutput['country_code'] == 'BEL') & (countrySectorGrossOutput['sector'] == 'Transport'), 'Value'].squeeze()\r\n",
					"countrySectorGrossOutputValue"
				],
				"execution_count": 96
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Equation A (VAR, Gross Ouputs)\r\n",
					"countrySectorOutputGrossValueVAR = countrySectorGrossOutput.loc[(countrySectorGrossOutput['country_code'] == importer) & (countrySectorGrossOutput['sector'] == sector), 'Value'].squeeze()\r\n",
					"countrySectorOutputGrossValueVAR"
				],
				"execution_count": 98
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Equation A (GrossExports)\r\n",
					"countrySectorGrossExportsValue = countrySectorGrossExports.loc[(countrySectorGrossExports['country_code'] == 'BEL') & (countrySectorGrossExports['sector'] == 'Transport'), 'Value'].squeeze()\r\n",
					"countrySectorGrossExportsValue"
				],
				"execution_count": 99
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Equation A (VAR, Gross Exports)\r\n",
					"countrySectorGrossExportsValueVAR = countrySectorGrossExports.loc[(countrySectorGrossExports['country_code'] == importer) & (countrySectorGrossExports['sector'] == sector), 'Value'].squeeze()\r\n",
					"countrySectorGrossExportsValueVAR"
				],
				"execution_count": 100
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Equation B\r\n",
					"sectorColSum = Z.loc[:, [('BEL', 'Transport')]].sum().values[0]\r\n",
					"sectorColSum"
				],
				"execution_count": 101
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Equation B (VAR)\r\n",
					"sectorColSumVAR = Z.loc[:, (importer, sector)].sum()\r\n",
					"sectorColSumVAR"
				],
				"execution_count": 102
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Equation C\r\n",
					"countryZ_row_filter = eora_data.Z.index.get_level_values('region').str.startswith('DEU')\r\n",
					"countryZ_column_filter = eora_data.Z.columns.get_level_values('region').str.startswith('BEL')\r\n",
					"\r\n",
					"countryZ = Z.loc[countryZ_row_filter, countryZ_column_filter]\r\n",
					"importContributions = (countryZ.loc[('DEU', 'Transport'), [('BEL', 'Transport')]].values[0]) / sectorColSum\r\n",
					"importContributions"
				],
				"execution_count": 103
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Equation C (VAR)\r\n",
					"countryZ_row_filter = eora_data.Z.index.get_level_values('region').str.startswith(exporter)\r\n",
					"countryZ_column_filter = eora_data.Z.columns.get_level_values('region').str.startswith(importer)\r\n",
					"\r\n",
					"countryZ = Z.loc[countryZ_row_filter, countryZ_column_filter]\r\n",
					"importContributionsVAR = (countryZ.loc[(exporter, sector), [(importer, sector)]].values[0]) / sectorColSum\r\n",
					"importContributionsVAR"
				],
				"execution_count": 104
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"(countrySectorGrossOutputValue-sectorColSum) * importContributions"
				],
				"execution_count": 105
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"(countrySectorOutputGrossValueVAR-sectorColSumVAR) * importContributionsVAR"
				],
				"execution_count": 106
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def importCalculatorSingleSectorGrossOutput(importer, exporter, sector):\r\n",
					"    # Filter the countrySectorGrossOutput DataFrame to get the output value for the importer and sector\r\n",
					"    countrySectorGrossOutputValue = countrySectorGrossOutput.loc[(countrySectorGrossOutput['country_code'] == importer) & (countrySectorGrossOutput['sector'] == sector), 'Value'].squeeze()\r\n",
					"\r\n",
					"    # Calculate the total output for the sector\r\n",
					"    sectorColSum = Z.loc[:, (importer, sector)].sum()\r\n",
					"\r\n",
					"    # Filter the eora_data.Z DataFrame to get the relevant rows and columns\r\n",
					"    countryZ_row_filter = eora_data.Z.index.get_level_values('region').str.match(exporter)\r\n",
					"    countryZ_column_filter = eora_data.Z.columns.get_level_values('region').str.match(importer)\r\n",
					"\r\n",
					"    countryZ = Z.loc[countryZ_row_filter, countryZ_column_filter]\r\n",
					"    importContributions = (countryZ.loc[(exporter, sector), [(importer, sector)]].values[0]) / sectorColSum\r\n",
					"\r\n",
					"    result = (countrySectorGrossOutputValue-sectorColSum) * importContributions\r\n",
					"    return result"
				],
				"execution_count": 107
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"importCalculatorSingleSectorGrossOutput('BEL', 'DEU', 'Transport')"
				],
				"execution_count": 109
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def importCalculatorGrossOutputVector(importer, exporter, sectors):\r\n",
					"    result = []\r\n",
					"    for sector in sectors:\r\n",
					"        # Filter the countrySectorOutput DataFrame to get the output value for the importer and sector\r\n",
					"        countrySectorGrossOutputValue = countrySectorGrossOutput.loc[(countrySectorGrossOutput['country_code'] == importer) & (countrySectorGrossOutput['sector'] == sector), 'Value'].squeeze()\r\n",
					"\r\n",
					"        # Calculate the total output for the sector\r\n",
					"        sectorColSum = Z.loc[:, (importer, sector)].sum()\r\n",
					"\r\n",
					"        # Filter the eora_data.Z DataFrame to get the relevant rows and columns\r\n",
					"        countryZ_row_filter = eora_data.Z.index.get_level_values('region').str.match(exporter)\r\n",
					"        countryZ_column_filter = eora_data.Z.columns.get_level_values('region').str.match(importer)\r\n",
					"\r\n",
					"        countryZ = Z.loc[countryZ_row_filter, countryZ_column_filter]\r\n",
					"        importContributions = (countryZ.loc[(exporter, sector), [(importer, sector)]].values[0]) / sectorColSum\r\n",
					"\r\n",
					"        result.append((countrySectorGrossOutputValue-sectorColSum) * importContributions)\r\n",
					"    return result"
				],
				"execution_count": 69
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sectors = ['Agriculture', 'Fishing', 'Mining and Quarrying', 'Food & Beverages', 'Textiles and Wearing Apparel','Wood and Paper', 'Petroleum, Chemical and Non-Metallic Mineral Products', 'Metal Products','Electrical and Machinery', 'Transport Equipment', 'Other Manufacturing', 'Recycling','Electricity, Gas and Water', 'Construction', 'Maintenance and Repair',\t'Wholesale Trade', 'Retail Trade', 'Hotels and Restraurants', 'Transport', 'Post and Telecommunications','Finacial Intermediation and Business Activities', 'Public Administration', 'Education, Health and Other Services', 'Private Households', 'Others','Re-export & Re-import']\r\n",
					"importContributionVector = importCalculatorGrossOutputVector('BEL', 'DEU', sectors)\r\n",
					"#importContributionVector\r\n",
					"importContributionSum = np.squeeze(np.sum(importContributionVector))\r\n",
					"\r\n",
					"importContributionSum"
				],
				"execution_count": 70
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def importCalculatorSingleSectorGrossExports(importer, exporter, sector):\r\n",
					"    # Filter the countrySectorGrossExportsDataFrame to get the output value for the importer and sector\r\n",
					"    countrySectorGrossExportsValue = countrySectorGrossExports.loc[(countrySectorGrossExports['country_code'] == importer) & (countrySectorGrossExports['sector'] == sector), 'Value'].squeeze()\r\n",
					"\r\n",
					"    # Calculate the total exports for the sector\r\n",
					"    sectorColSum = Z.loc[:, (importer, sector)].sum()\r\n",
					"\r\n",
					"    # Filter the eora_data.Z DataFrame to get the relevant rows and columns\r\n",
					"    countryZ_row_filter = eora_data.Z.index.get_level_values('region').str.match(exporter)\r\n",
					"    countryZ_column_filter = eora_data.Z.columns.get_level_values('region').str.match(importer)\r\n",
					"\r\n",
					"    countryZ = Z.loc[countryZ_row_filter, countryZ_column_filter]\r\n",
					"    importContributions = (countryZ.loc[(exporter, sector), [(importer, sector)]].values[0]) / sectorColSum\r\n",
					"\r\n",
					"    result = (countrySectorGrossExportsValue-sectorColSum) * importContributions\r\n",
					"    return result"
				],
				"execution_count": 79
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"importCalculatorSingleSectorGrossExports('BEL', 'DEU', 'Agriculture')"
				],
				"execution_count": 80
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def importCalculatorGrossExportsVector(importer, exporter, sectors):\r\n",
					"    result = []\r\n",
					"    for sector in sectors:\r\n",
					"        # Filter the countrySectorOutput DataFrame to get the output value for the importer and sector\r\n",
					"        countrySectorGrossExportsValue = countrySectorGrossExports.loc[(countrySectorGrossExports['country_code'] == importer) & (countrySectorGrossExports['sector'] == sector), 'Value'].squeeze()\r\n",
					"\r\n",
					"        # Calculate the total output for the sector\r\n",
					"        sectorColSum = Z.loc[:, (importer, sector)].sum()\r\n",
					"\r\n",
					"        # Filter the eora_data.Z DataFrame to get the relevant rows and columns\r\n",
					"        countryZ_row_filter = eora_data.Z.index.get_level_values('region').str.match(exporter)\r\n",
					"        countryZ_column_filter = eora_data.Z.columns.get_level_values('region').str.match(importer)\r\n",
					"\r\n",
					"        countryZ = Z.loc[countryZ_row_filter, countryZ_column_filter]\r\n",
					"        importContributions = (countryZ.loc[(exporter, sector), [(importer, sector)]].values[0]) / sectorColSum\r\n",
					"\r\n",
					"        result.append((countrySectorGrossExportsValue-sectorColSum) * importContributions)\r\n",
					"    return result"
				],
				"execution_count": 81
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sectors = ['Agriculture', 'Fishing', 'Mining and Quarrying', 'Food & Beverages', 'Textiles and Wearing Apparel','Wood and Paper', 'Petroleum, Chemical and Non-Metallic Mineral Products', 'Metal Products','Electrical and Machinery', 'Transport Equipment', 'Other Manufacturing', 'Recycling','Electricity, Gas and Water', 'Construction', 'Maintenance and Repair',\t'Wholesale Trade', 'Retail Trade', 'Hotels and Restraurants', 'Transport', 'Post and Telecommunications','Finacial Intermediation and Business Activities', 'Public Administration', 'Education, Health and Other Services', 'Private Households', 'Others','Re-export & Re-import']\r\n",
					"importContributionVector = importCalculatorGrossExportsVector('BEL', 'DEU', sectors)\r\n",
					"#importContributionVector\r\n",
					"importContributionSum = np.squeeze(np.sum(importContributionVector))\r\n",
					"\r\n",
					"importContributionSum"
				],
				"execution_count": 82
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"This is just the gross balance of trade."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"BALGR_c = EXGR_c - IMGR_c\r\n",
					"BoT = pd.DataFrame(BALGR_c)\r\n",
					"BoT"
				],
				"execution_count": 83
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"I need to calculate the country to country imports and country to country exports. Balance of trade would just be the exports minus the imports. I have the country to country exports (countryCountryExports). I should be able to flip the direction to get the imports (i.e. exports from Albania to Afghanistan == Afghan imports from Albania)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"countrySectorExports = pd.DataFrame(EXGR_cs_c)\r\n",
					"countryCountryExports = pd.DataFrame(EXGR_c_c)\r\n",
					"\r\n",
					"countrySectorLabels = spark.read.load('abfss://acj802@ac2synapsedatalabstorage.dfs.core.windows.net/EORA_Labels/Country+Sector_Labels.csv', format='csv', sep=\"\\t\").toPandas()\r\n",
					"countryLabels = spark.read.load('abfss://acj802@ac2synapsedatalabstorage.dfs.core.windows.net/EORA_Labels/country-labels.csv', format='csv', sep=\"\\t\").toPandas()\r\n",
					"\r\n",
					"countrySectorExports.set_axis(countryLabels.values.squeeze(), axis = 1, inplace = True)\r\n",
					"\r\n",
					"countrySectorLabels = countrySectorLabels.iloc[1:]\r\n",
					"countrySectorLabels = countrySectorLabels.reset_index(drop = True)\r\n",
					"countrySectorExports = countrySectorExports.assign(_c0 = countrySectorLabels['_c0'])\r\n",
					"\r\n",
					"countrySectorExports = countrySectorExports.reindex(columns =[countrySectorExports.columns[-1]] + countrySectorExports.columns[:-1].tolist())\r\n",
					"\r\n",
					"countrySectorExports['_c0'] = countrySectorExports['_c0'].str.replace('Industries, ', '')\r\n",
					"countrySectorExports['_c0'] = countrySectorExports['_c0'].str.replace('Commodities, ', '')\r\n",
					"\r\n",
					"countryCountryExports.set_axis(countryLabels.values.squeeze(), axis = 1, inplace = True)\r\n",
					"countryCountryExports = countryCountryExports.assign(_c0 = countryLabels['_c0'])\r\n",
					"countryCountryExports = countryCountryExports.reindex(columns = [countryCountryExports.columns[-1]] + countryCountryExports.columns[:-1].tolist())\r\n",
					"countryCountryExports.set_index('_c0', inplace = True)"
				],
				"execution_count": 84
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def countryCountryBalanceOfTrade(supplier, countryOfInterest):\r\n",
					"    exportValue = countryCountryExports.loc[countryOfInterest, supplier]\r\n",
					"    importValue = countryCountryExports.loc[supplier, countryOfInterest]\r\n",
					"\r\n",
					"    BoT = exportValue-importValue\r\n",
					"    return BoT"
				],
				"execution_count": 85
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"countryCountryExports.sum(axis = 1)"
				],
				"execution_count": 86
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"countryCountryBalanceOfTrade('CHN', 'USA')"
				],
				"execution_count": 87
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def grossBalanceOfTrade(countryOfInterest):\r\n",
					"    BoT = 0\r\n",
					"    for supplier in countryCountryExports.columns:\r\n",
					"        exportValue = countryCountryExports.loc[countryOfInterest, supplier]\r\n",
					"        importValue = countryCountryExports.loc[supplier, countryOfInterest]\r\n",
					"        BoT += exportValue - importValue\r\n",
					"    return BoT"
				],
				"execution_count": 88
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"grossBalanceOfTrade('AFG')"
				],
				"execution_count": 89
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def balanceOfTradeForAll(countryOfInterest):\r\n",
					"    BoT_list = []\r\n",
					"    for supplier in countryCountryExports.columns:\r\n",
					"        exportValue = countryCountryExports.loc[countryOfInterest, supplier]\r\n",
					"        importValue = countryCountryExports.loc[supplier, countryOfInterest]\r\n",
					"        BoT = exportValue - importValue\r\n",
					"        BoT_list.append(BoT)\r\n",
					"    return BoT_list"
				],
				"execution_count": 90
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"balanceOfTradeForAll('AFG')"
				],
				"execution_count": 91
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"countryCountryBalanceOfTradeList = np.zeros((len(countryCountryExports.columns), len(countryCountryExports.columns)))\r\n",
					"for i, country in enumerate(countryCountryExports.columns):\r\n",
					"    BoT_list = balanceOfTradeForAll(country)\r\n",
					"    countryCountryBalanceOfTradeList[i] = np.array(BoT_list)"
				],
				"execution_count": 92
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"countryCountryBalanceOfTradeFrame = pd.DataFrame(np.zeros((len(countryCountryExports.columns), len(countryCountryExports.columns))), index=countryCountryExports.columns, columns=countryCountryExports.columns)\r\n",
					"for i, country in enumerate(countryCountryExports.columns):\r\n",
					"    BoT_list = balanceOfTradeForAll(country)\r\n",
					"    countryCountryBalanceOfTradeFrame.iloc[i] = np.array(BoT_list)"
				],
				"execution_count": 93
			}
		]
	}
}