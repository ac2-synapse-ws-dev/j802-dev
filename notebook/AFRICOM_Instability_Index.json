{
	"name": "AFRICOM_Instability_Index",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "ac2sparkpooldev",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "6200c002-153a-471f-ab0b-1bac22af0fc8"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/fb276628-ada1-41d2-9fe6-b02c83c5d04e/resourceGroups/ac2-rg-synapse-01/providers/Microsoft.Synapse/workspaces/ac2-synapse-ws-dev/bigDataPools/ac2sparkpooldev",
				"name": "ac2sparkpooldev",
				"type": "Spark",
				"endpoint": "https://ac2-synapse-ws-dev.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ac2sparkpooldev",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### LTC Cardy Moten III, ACJ802, cardy.moten3.mil@mail.mil \n",
					"#### 19 May 2025"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Purpose\n",
					"\n",
					"This notebook provides the methodology for extracting the requisite datasets to build and subsequently analyze the [AFRICOM Instability Risk Index (IRI) Assessment](https://dod365.sharepoint-mil.us/:w:/r/teams/AFRICOM-AFRICOMJ802Collaboration/Shared%20Documents/General/Campaign%20Assessment%20Literature/3-Analysis%20and%20Assessment/Risk%20Analysis/Africa%20Instability%20Risk%20Assessment_5MAY2025.docx?d=wc2e7e9be66ea4c1b9e77a30f729d54ce&csf=1&web=1&e=XXlM2m) [1]. The proponent for the use of the index and the methodology to create the index is the USAFRICOM J54."
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Index Overview\n",
					"\n",
					"The IRI is a composite index that is built from 30 indicators across two domains (Social Cohesion and Governance Capacity) developed by the IRI assessmeent team [1]. Each indicator is converted from its raw format to a rescaled score between 0 to 2 summarized by the table below.\n",
					"\n",
					"| Score | Interpretation            |\n",
					"|-------|---------------------------|\n",
					"| 0     | low instability risk      |\n",
					"| 1     | moderate instability risk |\n",
					"| 2     | high instability risk     |\n",
					"\n",
					"Based on this method a country can have a score ranging from 0 - 60 with lower scores representing more stability. To ensure consistency with using this index with across countries when analyzing with regards to domains across time, the scores are nomalized again to a 0 - 1 ratio value. This conversion is simply done by the following formula $$normalized\\_score = \\frac{current\\_score}{max\\_score}$$\n",
					"\n",
					"## Methodology Addition\n",
					"\n",
					"In addition to the coversion of the raw data, we will also produce estimates out to the current year of analysis since a few datasets stop their collection prior to the current year of analysis. In these cases we will employ Autoregressive Integrated Moving Average (ARIMA) estimates along with building a sample distribution using Metalogs [2] [3].\n",
					""
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Packages"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Installs"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"%pip install pandas_datareader"
				],
				"execution_count": 1
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Imports"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"import pandas as pd\n",
					"import numpy as np\n",
					"import requests\n",
					"import pandas_datareader.wb as wb\n",
					"from notebookutils import mssparkutils\n",
					"from pyspark.sql import SparkSession"
				],
				"execution_count": 23
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Gather Data\n",
					"\n",
					"USAFRICOM should collect new data on an annual basis since most of these data sources are updated on that cycle.\n",
					"\n",
					"## Social Cohesion Data\n",
					"\n",
					"| Data Source | URL | Indicator Domain | Notes |\n",
					"|-------------|-----|------------------|-------|\n",
					"| Notre Dame Global Adaptation Initiative (ND-GAIN) [4]    | <https://gain.nd.edu/our-work/country-index/download-data/> | Socioenvironmental Pressures | Annual Update |\n",
					"| The Commonwealth - Global Youth Index [5]    | <https://cwapiservices.thecommonwealth.org/index.html> | Socioenvironmental Pressures | Annual Update |\n",
					"| World Bank Literacy Rates [6]    | <https://data.worldbank.org/indicator/SE.ADT.LITR.ZS?most_recent_value_desc=true> | Socioenvironmental Pressures | Replacement for the United Nations Human Development Report -Education Index Score |\n",
					"| Fragile State Index—Human Flight and Brain Drain score [7]    | <https://fragilestatesindex.org/indicators/e3/> | Socioenvironmental Pressures | Annual Update |\n",
					"| Fragile State Index—Demographic Pressures score [7]   | <https://fragilestatesindex.org/indicators/s1/> | Socioenvironmental Pressures | Annual Update |\n",
					"\n",
					"Table of IRI Social Cohesion Datasources\n",
					""
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Socioenvironmental Pressures Domain"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### ND-Gain\n",
					"\n",
					"This dataset comes in a zip file containing multiple file. The required file to build the IRI is called `resources/gain/gain.csv`. After downloading the file, I renamed it to `nd_gain_country_index_2024.csv`."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"\n",
					"# Define the column names\n",
					"iri_col_names = [\"iso3\", \"name\", \"year\", \"value\"]\n",
					"\n",
					"# Read the CSV files\n",
					"environmental_adaptation_path = 'abfss://acj802@ac2synapsedatalabstorage.dfs.core.windows.net/AFRICOM_Instability_Index/nd_gain_country_index_2024.csv'\n",
					"african_countries_path = 'abfss://acj802@ac2synapsedatalabstorage.dfs.core.windows.net/AFRICOM_Instability_Index/African_Countries_ISO3.csv'\n",
					"environmental_adaptation = pd.read_csv(environmental_adaptation_path)\n",
					"\n",
					"african_countries = pd.read_csv(african_countries_path)\n",
					"african_countries.rename(columns={'Country': 'country'}, inplace=True)\n",
					"\n",
					"# Filter for African countries\n",
					"environmental_adaptation = environmental_adaptation[environmental_adaptation['ISO3'].isin(african_countries['ISO3'])]\n",
					"\n",
					"# Reshape the data from wide to long format\n",
					"environmental_adaptation = environmental_adaptation.melt(\n",
					"    id_vars=[\"ISO3\", \"Name\"],\n",
					"    value_vars=[str(year) for year in range(1995, 2022 + 1)],\n",
					"    var_name=\"year\",\n",
					"    value_name=\"value\"\n",
					")\n",
					"\n",
					"# Rename columns\n",
					"environmental_adaptation.columns = iri_col_names\n",
					"\n",
					"# Compute 'adaptation_score'\n",
					"environmental_adaptation['adaptation_score'] = 2 - (2 * environmental_adaptation['value'] / 100)\n",
					"\n",
					"# Convert 'year' to numeric\n",
					"environmental_adaptation['year'] = pd.to_numeric(environmental_adaptation['year'])\n",
					"\n",
					"# Filter for years >= 2000\n",
					"environmental_adaptation = environmental_adaptation[environmental_adaptation['year'] >= 2000]\n",
					"\n",
					"print(environmental_adaptation.head())"
				],
				"execution_count": 11
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Commonwealth Youth Index"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"#Read in json file\n",
					"\n",
					"url = \"https://cwapiservices.thecommonwealth.org/CountryData/GetAllYDI_index_scores\"\n",
					"headers = {\"Accept\": \"application/json\"}\n",
					"\n",
					"response = requests.get(url, headers=headers)\n",
					"data = response.json()\n",
					"\n",
					"\n",
					"# Convert to DataFrame\n",
					"youth_underdevelopment = pd.json_normalize(data)\n",
					"\n",
					"# Filter for African countries\n",
					"youth_underdevelopment = youth_underdevelopment[youth_underdevelopment['iD_0'].isin(african_countries['ISO3'])]\n",
					"\n",
					"#Select iD_0, country, year, overall_score\n",
					"youth_underdevelopment = youth_underdevelopment[['iD_0', 'country', 'year', 'overall_score']]\n",
					"\n",
					"# Rename columns\n",
					"youth_underdevelopment.columns = iri_col_names\n",
					"\n",
					"# Compute 'underdevelopment_score'\n",
					"youth_underdevelopment['underdevelopment_score'] = 2 - (2 * youth_underdevelopment['value'])\n",
					"\n",
					"# Convert 'year' to numeric\n",
					"youth_underdevelopment['year'] = pd.to_numeric(youth_underdevelopment['year'])\n",
					"\n",
					"# Filter for years >= 2000\n",
					"youth_underdevelopment = youth_underdevelopment[youth_underdevelopment['year'] >= 2000]\n",
					"\n",
					"print(youth_underdevelopment.head())\n",
					"\n",
					""
				],
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Illiteracy"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Read in Data\n",
					"\n",
					"# Define the indicator and countries (or use 'all')\n",
					"indicator = 'SE.ADT.LITR.ZS'\n",
					"\n",
					"# Fetch data for all countries\n",
					"illiteracy = wb.download(indicator=indicator, country='all', start=2000, end=2023)\n",
					"illiteracy = illiteracy.reset_index()\n",
					"\n",
					"#Get ISO3 values and filter for specific African countries\n",
					"illiteracy = pd.merge(illiteracy, african_countries, on='country', how='left')\n",
					"illiteracy = illiteracy[illiteracy['ISO3'].isin(african_countries['ISO3'])]\n",
					"\n",
					"#Rename columns\n",
					"illiteracy = illiteracy[['ISO3', 'country', 'year', indicator]]\n",
					"illiteracy.columns = iri_col_names\n",
					"illiteracy = illiteracy.dropna(subset=['value'])\n",
					"illiteracy['value'] = 100 - illiteracy['value'] #want illiteracy percentage\n",
					"\n",
					"# Compute 'illiteracy_score'\n",
					"illiteracy['illiteracy_score'] = 2 * illiteracy['value'] / 100\n",
					"\n",
					"# Convert 'year' to numeric\n",
					"illiteracy['year'] = pd.to_numeric(illiteracy['year'])\n",
					"\n",
					"# Filter for years >= 2000\n",
					"illiteracy = illiteracy[illiteracy['year'] >= 2000]\n",
					"\n",
					"\n",
					"print(illiteracy.head())\n",
					""
				],
				"execution_count": 20
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Fragile State Index Data"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"file_list = mssparkutils.fs.ls(\"abfss://acj802@ac2synapsedatalabstorage.dfs.core.windows.net/AFRICOM_Instability_Index/fsi_data\")\n",
					"file_paths = []\n",
					"\n",
					"for file_path in file_list:\n",
					"    if '.xlsx' in file_path.path:\n",
					"        file_paths.append(file_path.path)\n",
					"\n",
					"\n",
					"for path in file_paths:\n",
					"    df = spark.read.format(\"com.crealytics.spark.excel\") \\\n",
					"        .option(\"useHeader\", \"true\") \\\n",
					"        .option(\"inferSchema\", \"true\") \\\n",
					"        .load(path)\n",
					"    dfs.append(df)\n",
					"\n",
					"# Union all DataFrames\n",
					"combined_df = dfs[0]\n",
					"for df in dfs[1:]:\n",
					"    combined_df = combined_df.unionByName(df)\n",
					"\n",
					"fsi_data = combined_df.toPandas()\n",
					"\n",
					"print(fsi_data.head())\n",
					""
				],
				"execution_count": 36
			},
			{
				"cell_type": "code",
				"source": [
					"for path in file_paths:\n",
					"    if '.xlsx' in path.path:\n",
					"        print(path.path)"
				],
				"execution_count": 35
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\n",
					"### References\n",
					"[1] USAFRICOM J54. (2025). *Africa Instability Risk Assessment*. USAFRICOM.\n",
					"\n",
					"[2] Wikipedia. (2025). *Autoregressive integrated moving average*. http://en.wikipedia.org/w/index.php?title=Autoregressive\\%20integrated\\%20moving\\%20average&oldid=1286449544, accessed 07 May 2025.\n",
					"\n",
					"[3] Wikipedia. (2025). *Metalog distribution*. http://en.wikipedia.org/w/index.php?title=Metalog\\%20distribution&oldid=1278020484, accessed 07 May 2025.\n",
					"\n",
					"[4] University of Notre Dame. (2025). *Notre Dame Global Adaptation Initiative Country Index (ND-GAIN)*. https://gain.nd.edu/our-work/country-index/download-data/\n",
					"\n",
					"[5] The Commonwealth. (2025). *Youth Development Index*. https://cwapiservices.thecommonwealth.org/index.html\n",
					"\n",
					"[6] World Bank. (2025). *Literacy rate, adult total (% of people ages 15 and above)*. https://data.worldbank.org/indicator/SE.ADT.LITR.ZS?most_recent_value_desc=true\n",
					"\n",
					"[7] The Fund for Peace. (2022). *Fragile State Index*. https://fragilestatesindex.org/excel/\n",
					"\n",
					"[8] Next Reference\n",
					"\n",
					""
				]
			}
		]
	}
}