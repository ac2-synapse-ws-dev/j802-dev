{
	"name": "EORA_PyMRIO2",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "ac2sparkpooldev",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "e637e0af-b89f-47c6-a019-e4ec046bbd72"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/fb276628-ada1-41d2-9fe6-b02c83c5d04e/resourceGroups/ac2-rg-synapse-01/providers/Microsoft.Synapse/workspaces/ac2-synapse-ws-dev/bigDataPools/ac2sparkpooldev",
				"name": "ac2sparkpooldev",
				"type": "Spark",
				"endpoint": "https://ac2-synapse-ws-dev.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ac2sparkpooldev",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"print(\"Im Awake\")\r\n",
					"\r\n",
					"#import pymrio as pmr\r\n",
					"from notebookutils import mssparkutils\r\n",
					"import os\r\n",
					"import io\r\n",
					"from collections import namedtuple\r\n",
					"import pandas as pd\r\n",
					"import numpy as np\r\n",
					"import plotly.graph_objects as go\r\n",
					"from scipy.linalg import block_diag\r\n",
					"import warnings\r\n",
					"\r\n",
					"pd.set_option('display.max_columns', 30)\r\n",
					"pd.set_option('display.expand_frame_repr', False)\r\n",
					"pd.set_option('max_colwidth', None)"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Parameters\r\n",
					"num_cntry = 189\r\n",
					"num_sectors = 26\r\n",
					"num_fd_components = 6\r\n",
					"year_start = 2022\r\n",
					"year_end = 2022\r\n",
					"\r\n",
					"#eora_years = np.linspace(year_start, year_end, num = year_end - year_start + 1).astype(int).astype(str)\r\n",
					"\r\n",
					"#Read in the data\r\n",
					"fd_matrix_path = 'abfss://acj802@ac2synapsedatalabstorage.dfs.core.windows.net/Eora26_2022_bp/Eora26_2022_bp_FD.txt'\r\n",
					"id_matrix_path = 'abfss://acj802@ac2synapsedatalabstorage.dfs.core.windows.net/Eora26_2022_bp/Eora26_2022_bp_T.txt'\r\n",
					"va_matrix_path = 'abfss://acj802@ac2synapsedatalabstorage.dfs.core.windows.net/Eora26_2022_bp/Eora26_2022_bp_VA.txt'\r\n",
					"\r\n",
					"fd_matrix = spark.read.load(fd_matrix_path, format='csv', sep=\"\\t\").toPandas().to_numpy(dtype=float)\r\n",
					"id_matrix = spark.read.load(id_matrix_path, format='csv', sep=\"\\t\").toPandas().to_numpy(dtype=float)\r\n",
					"va_matrix = spark.read.load(va_matrix_path, format='csv', sep=\"\\t\").toPandas().to_numpy(dtype=float)\r\n",
					"#print(\"Data read for year: \" + eora_years[i])\r\n",
					"\r\n",
					"# Compute Stats\r\n",
					"va_total_cs = va_matrix.sum(axis = 0)\r\n",
					"FD = fd_matrix.reshape((num_cntry*num_sectors + 1), num_fd_components, -1)\r\n",
					"FD = FD.sum(axis=1)\r\n",
					"FD = np.squeeze(FD) # Squeeze to remove single-dimensional entries\r\n",
					"\r\n",
					"GRTR_INT_cs_cs = id_matrix[0:(num_cntry*num_sectors), 0:(num_cntry*num_sectors)]\r\n",
					"GRTR_FNL_cs_c = FD[0:num_cntry*num_sectors,0:num_cntry]\r\n",
					"VALUE_cs = va_total_cs[0:(num_cntry*num_sectors)]\r\n",
					"\r\n",
					"# Initialize empty list to hold blocks\r\n",
					"imtx_cs_c = []\r\n",
					"imtx_cs_cs = []\r\n",
					"imtx_c_cs=[]\r\n",
					"imtx_cs_ck = []\r\n",
					"\r\n",
					"# Create block matrix\r\n",
					"iblk_cs_c = np.ones((num_sectors, 1))  # Create num_sectors x 1 vector of ones\r\n",
					"iblk_cs_cs = np.ones((num_sectors,num_sectors))\r\n",
					"ivector = np.ones((1, num_sectors))\r\n",
					"iblk_cs_ck = np.ones((num_sectors, num_fd_components))\r\n",
					"\r\n",
					"# Construct block diagonal matrix\r\n",
					"for j in range(num_cntry):\r\n",
					"    if j == 0:\r\n",
					"        imtx_cs_c = iblk_cs_c  # Initialize with the first block\r\n",
					"        imtx_cs_cs = iblk_cs_cs\r\n",
					"        imtx_c_cs = ivector\r\n",
					"        imtx_cs_ck = iblk_cs_ck\r\n",
					"\r\n",
					"    else:\r\n",
					"        imtx_cs_c = block_diag(imtx_cs_c, iblk_cs_c) \r\n",
					"        imtx_cs_cs = block_diag(imtx_cs_cs, iblk_cs_cs) \r\n",
					"        imtx_c_cs = block_diag(imtx_c_cs, ivector)\r\n",
					"        imtx_cs_ck = block_diag(imtx_cs_ck, iblk_cs_ck)\r\n",
					"\r\n",
					"imtx_c_c = np.eye(num_cntry)\r\n",
					"\r\n",
					"#Gross Output\r\n",
					"GO_cs_c = GRTR_INT_cs_cs.reshape(num_cntry*num_sectors, num_sectors, -1)\r\n",
					"GO_cs_c = GO_cs_c.sum(axis = 1)\r\n",
					"GO_cs_c = np.squeeze(GO_cs_c)\r\n",
					"GO_cs_c = GO_cs_c + GRTR_FNL_cs_c\r\n",
					"GO_cs = GO_cs_c.sum(axis = 1)\r\n",
					"GO_c_c = np.matmul(imtx_c_cs,GO_cs_c)\r\n",
					"elementwise_GO_product =  np.tile(GO_cs[:, np.newaxis],(1,num_cntry)) * imtx_cs_c\r\n",
					"summed_GO_result = elementwise_GO_product.sum(axis=0)\r\n",
					"GO_c = summed_GO_result.T\r\n",
					"\r\n",
					"#Value Added\r\n",
					"elementwise_VALUE_product = np.tile(VALUE_cs[:, np.newaxis], (1, num_cntry)) * imtx_cs_c\r\n",
					"summed_VALUE_result = elementwise_VALUE_product.sum(axis=0)\r\n",
					"VALUE_c = summed_VALUE_result.T\r\n",
					"\r\n",
					"#Derived value added\r\n",
					"Inputs_cs = GRTR_INT_cs_cs.sum(axis = 0)\r\n",
					"replicated_Inputs_cs = np.tile(Inputs_cs[:, np.newaxis], (1, num_cntry)) \r\n",
					"elementwise_INPUTS_product = replicated_Inputs_cs * imtx_cs_c\r\n",
					"summed_INPUTS_result = elementwise_INPUTS_product.sum(axis = 0)\r\n",
					"Inputs_c = summed_INPUTS_result.T\r\n",
					"\r\n",
					"#VA = Gross Outputs - Inputs\r\n",
					"VALUE_derived_cs = GO_cs - Inputs_cs\r\n",
					"replicated_VALUE_derived_cs = np.tile(VALUE_derived_cs[:, np.newaxis], (1, num_cntry))\r\n",
					"elementwise_VALUE_derived_product = replicated_VALUE_derived_cs * imtx_cs_c\r\n",
					"summed_VALUE_derived_result = elementwise_VALUE_derived_product.sum(axis = 0)\r\n",
					"VALUE_derived_c = summed_VALUE_derived_result.T\r\n",
					"\r\n",
					"#Gross Exports\r\n",
					"ones_cs_cs_array = np.ones((num_cntry*num_sectors))\r\n",
					"EXGR_INT_cs_cs = GRTR_INT_cs_cs * (ones_cs_cs_array - imtx_cs_cs)\r\n",
					"\r\n",
					"EXGR_INT_cs_c = np.full((num_cntry * num_sectors, num_cntry), np.nan)\r\n",
					"for k in range(num_cntry):\r\n",
					"    EXGR_INT_cs_c[:, k] = np.sum(EXGR_INT_cs_cs[:, (k * num_sectors):(num_sectors * (k + 1))], axis=1)\r\n",
					"\r\n",
					"EXGR_INT_cs = EXGR_INT_cs_cs.sum(axis = 1)\r\n",
					"\r\n",
					"replicated_EXGR_INT_cs = np.tile(EXGR_INT_cs[:, np.newaxis], (1, num_cntry))\r\n",
					"elementwise_EXGR_INT_cs_product = replicated_EXGR_INT_cs * imtx_cs_c\r\n",
					"summed_EXGR_INT_cs_result = elementwise_EXGR_INT_cs_product.sum(axis = 0)\r\n",
					"EXGR_INT_c = summed_EXGR_INT_cs_result.T\r\n",
					"\r\n",
					"ones_cs_c_array = np.ones((num_cntry*num_sectors, num_cntry))\r\n",
					"EXGR_FNL_cs_c = GRTR_FNL_cs_c * (ones_cs_c_array - imtx_cs_c)\r\n",
					"\r\n",
					"EXGR_FNL_cs = EXGR_FNL_cs_c * (ones_cs_c_array - imtx_cs_c)\r\n",
					"EXGR_FNL_cs = EXGR_FNL_cs.sum(axis = 1)\r\n",
					"\r\n",
					"EXGR_FNL_c = np.tile(EXGR_FNL_cs[:, np.newaxis],(1, num_cntry)) * imtx_cs_c\r\n",
					"EXGR_FNL_c = EXGR_FNL_c.sum(axis = 0).T\r\n",
					"\r\n",
					"EXGR_cs_c = EXGR_INT_cs_c + EXGR_FNL_cs_c\r\n",
					"EXGR_c_c = np.matmul(imtx_c_cs, EXGR_cs_c)\r\n",
					"\r\n",
					"EXGR_cs = EXGR_INT_cs + EXGR_FNL_cs\r\n",
					"EXGR_c = EXGR_INT_c + EXGR_FNL_c\r\n",
					"\r\n",
					"#Gross Imports\r\n",
					"ones_cs_array = np.ones((num_cntry * num_sectors))\r\n",
					"IMGR_INT_cs = GRTR_INT_cs_cs * (ones_cs_array - imtx_cs_cs)\r\n",
					"IMGR_INT_cs = IMGR_INT_cs.sum(axis = 0)\r\n",
					"\r\n",
					"IMGR_INT_c = np.tile(IMGR_INT_cs[:, np.newaxis],(1, num_cntry)) * imtx_cs_c\r\n",
					"IMGR_INT_c = IMGR_INT_c.sum(axis = 0).T\r\n",
					"\r\n",
					"ones_cs_c_array = np.ones((num_cntry * num_sectors, num_cntry))\r\n",
					"IMGR_FNL_c = GRTR_FNL_cs_c * (ones_cs_c_array - imtx_cs_c)\r\n",
					"IMGR_FNL_c = IMGR_FNL_c.sum(axis = 0).T\r\n",
					"\r\n",
					"IMGR_c = IMGR_INT_c + IMGR_FNL_c\r\n",
					"\r\n",
					"#Gross Trade Balance\r\n",
					"BALGR_c = EXGR_c - IMGR_c\r\n",
					"\r\n",
					"#Demand for Domestic Inputs (Use of Domestic Intermediates)\r\n",
					"DDGR_INT_cs = GRTR_INT_cs_cs * imtx_cs_cs\r\n",
					"DDGR_INT_cs = DDGR_INT_cs.sum(axis = 0).T\r\n",
					"\r\n",
					"DDGR_INT_c = np.tile(DDGR_INT_cs[:, np.newaxis],(1, num_cntry)) * imtx_cs_c\r\n",
					"DDGR_INT_c = DDGR_INT_c.sum(axis = 0).T\r\n",
					"\r\n",
					"DDGR_FNL_c = GRTR_FNL_cs_c * imtx_cs_c\r\n",
					"DDGR_FNL_c = DDGR_FNL_c.sum(axis = 0).T\r\n",
					"\r\n",
					"#Domestic and Foreign Final Demand\r\n",
					"GRTR_FNL_DOM_cs_c = GRTR_FNL_cs_c * imtx_cs_c\r\n",
					"GRTR_FNL_DOM_cs = GRTR_FNL_DOM_cs_c.sum(axis = 1)\r\n",
					"\r\n",
					"#By sector\r\n",
					"GRTR_FNL_DOM_cs_ck = fd_matrix[0:num_cntry*num_sectors, 0:num_cntry*num_fd_components] * imtx_cs_ck\r\n",
					"\r\n",
					"##Sum across the third dimension, across countries for each of the 6 components of final demand\r\n",
					"GRTR_FNL_DOM_cs_nfd = GRTR_FNL_DOM_cs_ck.reshape((num_cntry*num_sectors), num_fd_components, -1)\r\n",
					"GRTR_FNL_DOM_cs_nfd = GRTR_FNL_DOM_cs_nfd.sum(axis = 2)\r\n",
					"\r\n",
					"#Foreign Demand\r\n",
					"GRTR_FNL_FOR_cs_c = GRTR_FNL_cs_c * (ones_cs_c_array - imtx_cs_c)\r\n",
					"GRTR_FNL_FOR_cs = GRTR_FNL_FOR_cs_c.sum(axis = 1)\r\n",
					"\r\n",
					"##By sector\r\n",
					"ones_cs_ck_array = np.ones((num_cntry*num_sectors, num_cntry*num_fd_components))\r\n",
					"GRTR_FNL_FOR_cs_ck = fd_matrix[0:num_cntry*num_sectors, 0:num_cntry*num_fd_components] * (ones_cs_ck_array - imtx_cs_ck)\r\n",
					"\r\n",
					"##Sum across the third dimension, across countries for each of the 6 components of final demand\r\n",
					"GRTR_FNL_FOR_cs_nfd = GRTR_FNL_FOR_cs_ck.reshape((num_cntry*num_sectors), num_fd_components, -1)\r\n",
					"GRTR_FNL_FOR_cs_nfd = GRTR_FNL_FOR_cs_nfd.sum(axis = 2)\r\n",
					"\r\n",
					"#VA Vector\r\n",
					"with warnings.catch_warnings():\r\n",
					"    warnings.simplefilter('ignore')\r\n",
					"    Amat = GRTR_INT_cs_cs / np.tile(GO_cs[:, np.newaxis], (1, num_cntry * num_sectors))\r\n",
					"\r\n",
					"Amat[np.isnan(Amat)] = 0\r\n",
					"Amat[np.isinf(Amat)] = 0\r\n",
					"\r\n",
					"#VA shares\r\n",
					"va_vec_cs = 1 - np.sum(Amat)\r\n",
					"V_hat = np.eye((num_cntry * num_sectors)) - np.diag(Amat.sum(axis = 0))\r\n",
					"\r\n",
					"#Leontief inverse\r\n",
					"IminusA = np.eye((num_cntry * num_sectors)) - Amat\r\n",
					"Bmat = np.linalg.inv(IminusA)\r\n",
					"\r\n",
					"#Total Value Added by country-sector\r\n",
					"BY = np.matmul(Bmat, GRTR_FNL_cs_c.sum(axis = 1))\r\n",
					"va_cs = va_vec_cs * BY\r\n",
					"\r\n",
					"#DVA and FVA of gross exports (From V*B*E)\r\n",
					"TiVA = V_hat @ Bmat @ np.diag(EXGR_cs)\r\n",
					"\r\n",
					"EXGR_DVA_cs = np.sum(TiVA * imtx_cs_cs, axis = 0).T\r\n",
					"EXGR_FVA_cs = np.sum(TiVA * (ones_cs_array - imtx_cs_cs), axis = 0).T\r\n",
					"\r\n",
					"EXGR_DVA_c = np.tile(EXGR_DVA_cs[:, np.newaxis],(1, num_cntry)) * imtx_cs_c\r\n",
					"EXGR_DVA_c = EXGR_DVA_c.sum(axis = 0).T\r\n",
					"\r\n",
					"EXGR_FVA_c = np.tile(EXGR_FVA_cs[:, np.newaxis],(1, num_cntry)) * imtx_cs_c\r\n",
					"EXGR_FVA_c = EXGR_FVA_c.sum(axis = 0).T\r\n",
					"\r\n",
					"VS1_cs = np.sum(TiVA * (ones_cs_array - imtx_cs_cs), axis = 1)\r\n",
					"VS1_c = np.tile(VS1_cs[:, np.newaxis], (1, num_cntry)) * imtx_cs_c\r\n",
					"VS1_c = VS1_c.sum(axis = 0).T\r\n",
					"\r\n",
					"#Compute VA matrices (from V*B*Y)\r\n",
					"VA_cs_c = V_hat @ Bmat @ GRTR_FNL_cs_c\r\n",
					"\r\n",
					"ones_c_c_array = np.ones((num_cntry, num_cntry))\r\n",
					"VAX_cs_c = VA_cs_c * (ones_cs_c_array - imtx_cs_c)\r\n",
					"VA_c_c = np.matmul(imtx_c_cs, VA_cs_c)\r\n",
					"\r\n",
					"#Value added of exports only (exclude value_added of demestic goods)\r\n",
					"VAX_c_c = VA_c_c * (ones_c_c_array - np.eye(num_cntry))\r\n",
					"\r\n",
					"VAX_c = VAX_c_c.sum(axis = 1)\r\n",
					"\r\n",
					"#Koopman et al. Equation 36 Terms\r\n",
					"VAX1_cs_c = V_hat @ (Bmat * imtx_cs_cs) @ (GRTR_FNL_cs_c * (ones_cs_c_array - imtx_cs_c))\r\n",
					"VAX1_c_c = np.matmul(imtx_c_cs, VAX1_cs_c) # aggregate across rows by country\r\n",
					"VAX1_c = VAX1_c_c.sum(axis = 1)\r\n",
					"\r\n",
					"VAX2_cs_c = V_hat @ (Bmat * (ones_cs_array - imtx_cs_cs)) @ (GRTR_FNL_cs_c  - imtx_cs_c)\r\n",
					"VAX2_c_c = np.matmul(imtx_c_cs, VAX2_cs_c) # aggregate across rows by country\r\n",
					"VAX2_c = VAX2_c_c.sum(axis = 1)\r\n",
					"\r\n",
					"VAX3_cs_c_sum1 = V_hat @ (Bmat * (ones_cs_array - imtx_cs_cs)) @ (GRTR_FNL_cs_c * (ones_cs_c_array - imtx_cs_c))\r\n",
					"VAX3_cs_c_sum2 = VAX3_cs_c_sum1 * (ones_cs_c_array - imtx_cs_c)\r\n",
					"VAX3_c_c = np.matmul(imtx_c_cs, VAX3_cs_c_sum2) # aggregate across rows by country\r\n",
					"VAX3_c = VAX3_c_c.sum(axis = 1)\r\n",
					"\r\n",
					"DVA4_cs_c = V_hat @ (Bmat * (ones_cs_array - imtx_cs_cs)) @ (GRTR_FNL_cs_c * (ones_cs_c_array - imtx_cs_c))\r\n",
					"DVA4_c_c = np.matmul(imtx_c_cs,DVA4_cs_c) * imtx_c_c # aggregate across rows by country, and take just the diagonal elements\r\n",
					"DVA4_c = DVA4_c_c.sum(axis = 1)\r\n",
					"\r\n",
					"eye_inverse = np.linalg.inv(np.eye((num_cntry * num_sectors)))\r\n",
					"DVA5_cs_c = V_hat @ (Bmat * (ones_cs_array - imtx_cs_cs)) @ (Amat * (ones_cs_array - imtx_cs_cs)) @\\\r\n",
					"            ((eye_inverse - Amat) * imtx_cs_cs) @ (GRTR_FNL_cs_c * imtx_cs_c)\r\n",
					"DVA5_c_c = np.matmul(imtx_c_cs,DVA5_cs_c) * imtx_c_c # aggregate across rows by country, and take just the diagonal elements\r\n",
					"DVA5_c = DVA5_c_c.sum(axis = 1)\r\n",
					"\r\n",
					"DVA6_c = EXGR_DVA_c - VAX_c - DVA4_c - DVA5_c\r\n",
					"\r\n",
					"#Foreign Value Added in Domestic Final Demand\r\n",
					"DFD_FVA_c = VAX_c_c.sum(axis = 0)"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"countrySectorLabels = spark.read.load('abfss://acj802@ac2synapsedatalabstorage.dfs.core.windows.net/EORA_Labels/Country+Sector_Labels.csv', format='csv', sep=\"\\t\").toPandas()\r\n",
					"countrySectorLabels = countrySectorLabels.iloc[1:]\r\n",
					"countrySectorLabels = countrySectorLabels.reset_index(drop = True)\r\n",
					"\r\n",
					"countrySectorLabels['_c0'] = countrySectorLabels['_c0'].str.replace('Industries, ', '')\r\n",
					"countrySectorLabels['_c0'] = countrySectorLabels['_c0'].str.replace('Commodities, ', '')\r\n",
					"countrySectorLabels[['Country_Code', 'Sector']] = countrySectorLabels['_c0'].str.split(', ', n=1, expand=True)\r\n",
					"countrySectorLabels = countrySectorLabels.drop(['_c0'], axis = 1)"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Zindex1 = countrySectorLabels['Country_Code']\r\n",
					"Zindex2 = countrySectorLabels['Sector']\r\n",
					"\r\n",
					"Z = pd.DataFrame(id_matrix)\r\n",
					"Z = Z.iloc[:-1, :-1]\r\n",
					"Z = Z.set_index([Zindex1, Zindex2])\r\n",
					"Z.columns = pd.MultiIndex.from_tuples(list(zip(Zindex1, Zindex2)))\r\n",
					"Z.columns.names = ['Country_Code', 'Sector']\r\n",
					"Z"
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Gross Output Data Import and Prep. THIS ONE WORKS. USE IT.\r\n",
					"\r\n",
					"importer = 'BEL'\r\n",
					"exporter = 'DEU'\r\n",
					"sector = 'Transport'\r\n",
					"\r\n",
					"countrySectorGrossOutput = pd.DataFrame(GO_cs)\r\n",
					"\r\n",
					"countrySectorLabels = spark.read.load('abfss://acj802@ac2synapsedatalabstorage.dfs.core.windows.net/EORA_Labels/Country+Sector_Labels.csv', format='csv', sep=\"\\t\").toPandas()\r\n",
					"countryLabels = spark.read.load('abfss://acj802@ac2synapsedatalabstorage.dfs.core.windows.net/EORA_Labels/country-labels.csv', format='csv', sep=\"\\t\").toPandas()\r\n",
					"\r\n",
					"countrySectorLabels = countrySectorLabels.iloc[1:]\r\n",
					"countrySectorLabels = countrySectorLabels.reset_index(drop = True)\r\n",
					"countrySectorGrossOutput = countrySectorGrossOutput.assign(_c0 = countrySectorLabels['_c0'])\r\n",
					"\r\n",
					"countrySectorGrossOutput = countrySectorGrossOutput.reindex(columns =[countrySectorGrossOutput.columns[-1]] + countrySectorGrossOutput.columns[:-1].tolist())\r\n",
					"\r\n",
					"countrySectorGrossOutput['_c0'] = countrySectorGrossOutput['_c0'].str.replace('Industries, ', '')\r\n",
					"countrySectorGrossOutput['_c0'] = countrySectorGrossOutput['_c0'].str.replace('Commodities, ', '')\r\n",
					"\r\n",
					"countrySectorGrossOutput[['country_code', 'sector']] = countrySectorGrossOutput['_c0'].str.split(', ', expand=True,n=1)\r\n",
					"countrySectorGrossOutput = countrySectorGrossOutput.drop('_c0', axis=1)\r\n",
					"\r\n",
					"countrySectorGrossOutput = countrySectorGrossOutput.rename(columns={0: 'Value'})\r\n",
					"countrySectorGrossOutput = countrySectorGrossOutput.reindex(columns=['country_code', 'sector', 'Value'])\r\n",
					"\r\n",
					"countrySectorGrossOutput"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Gross Exports Data Import and Prep. THIS ONE WORKS. USE IT.\r\n",
					"importer = 'BEL'\r\n",
					"exporter = 'DEU'\r\n",
					"sector = 'Transport'\r\n",
					"\r\n",
					"countrySectorGrossExports = pd.DataFrame(EXGR_cs)\r\n",
					"\r\n",
					"countrySectorLabels = spark.read.load('abfss://acj802@ac2synapsedatalabstorage.dfs.core.windows.net/EORA_Labels/Country+Sector_Labels.csv', format='csv', sep=\"\\t\").toPandas()\r\n",
					"countryLabels = spark.read.load('abfss://acj802@ac2synapsedatalabstorage.dfs.core.windows.net/EORA_Labels/country-labels.csv', format='csv', sep=\"\\t\").toPandas()\r\n",
					"\r\n",
					"countrySectorLabels = countrySectorLabels.iloc[1:]\r\n",
					"countrySectorLabels = countrySectorLabels.reset_index(drop = True)\r\n",
					"countrySectorGrossExports = countrySectorGrossExports.assign(_c0 = countrySectorLabels['_c0'])\r\n",
					"\r\n",
					"countrySectorGrossExports = countrySectorGrossExports.reindex(columns =[countrySectorGrossExports.columns[-1]] + countrySectorGrossExports.columns[:-1].tolist())\r\n",
					"\r\n",
					"countrySectorGrossExports['_c0'] = countrySectorGrossExports['_c0'].str.replace('Industries, ', '')\r\n",
					"countrySectorGrossExports['_c0'] = countrySectorGrossExports['_c0'].str.replace('Commodities, ', '')\r\n",
					"\r\n",
					"countrySectorGrossExports[['country_code', 'sector']] = countrySectorGrossExports['_c0'].str.split(', ', expand=True,n=1)\r\n",
					"countrySectorGrossExports = countrySectorGrossExports.drop('_c0', axis=1)\r\n",
					"\r\n",
					"countrySectorGrossExports = countrySectorGrossExports.rename(columns={0: 'Value'})\r\n",
					"countrySectorGrossExports = countrySectorGrossExports.reindex(columns=['country_code', 'sector', 'Value'])\r\n",
					"\r\n",
					"countrySectorGrossExports"
				],
				"execution_count": 7
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"- $A = GrossOutputs_{Sector}$\r\n",
					"- $B = \\sum_{col} Sector$\r\n",
					"- $C = Z_{CountryA, Country B} / B$\r\n",
					"- $ Result = \\sum \\limits _{Sector 1} ^{Sector 26}[(A-B)*C]$"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Equation A (GrossOutput)\r\n",
					"countrySectorGrossOutputValue = countrySectorGrossOutput.loc[(countrySectorGrossOutput['country_code'] == 'BEL') & (countrySectorGrossOutput['sector'] == 'Transport'), 'Value'].squeeze()\r\n",
					"countrySectorGrossOutputValue"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Equation A (VAR, Gross Ouput)\r\n",
					"countrySectorGrossOutputValueVAR = countrySectorGrossOutput.loc[(countrySectorGrossOutput['country_code'] == importer) & (countrySectorGrossOutput['sector'] == sector), 'Value'].squeeze()\r\n",
					"countrySectorGrossOutputValueVAR"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Equation A (GrossExports)\r\n",
					"countrySectorGrossExportsValue = countrySectorGrossExports.loc[(countrySectorGrossExports['country_code'] == 'BEL') & (countrySectorGrossExports['sector'] == 'Transport'), 'Value'].squeeze()\r\n",
					"countrySectorGrossExportsValue"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Equation A (VAR, Gross Ouput)\r\n",
					"countrySectorGrossExportsValueVAR = countrySectorGrossExports.loc[(countrySectorGrossExports['country_code'] == importer) & (countrySectorGrossExports['sector'] == sector), 'Value'].squeeze()\r\n",
					"countrySectorGrossExportsValueVAR"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Equation B\r\n",
					"sectorColSum = Z.loc[:, [('BEL', 'Transport')]].sum().values[0]\r\n",
					"sectorColSum"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Equation B (VAR)\r\n",
					"sectorColSumVAR = Z.loc[:, (importer, sector)].sum()\r\n",
					"sectorColSumVAR"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Equation C\r\n",
					"countryZ_row_filter = Z.index.get_level_values('Country_Code').str.startswith('DEU')\r\n",
					"countryZ_column_filter = Z.columns.get_level_values('Country_Code').str.startswith('BEL')\r\n",
					"\r\n",
					"countryZ = Z.loc[countryZ_row_filter, countryZ_column_filter]\r\n",
					"importContributions = (countryZ.loc[('DEU', 'Transport'), [('BEL', 'Transport')]].values[0]) / sectorColSum\r\n",
					"importContributions"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Equation C (VAR)\r\n",
					"countryZ_row_filter = Z.index.get_level_values('Country_Code').str.startswith(exporter)\r\n",
					"countryZ_column_filter = Z.columns.get_level_values('Country_Code').str.startswith(importer)\r\n",
					"\r\n",
					"countryZ = Z.loc[countryZ_row_filter, countryZ_column_filter]\r\n",
					"importContributionsVAR = (countryZ.loc[(exporter, sector), [(importer, sector)]].values[0]) / sectorColSum\r\n",
					"importContributionsVAR"
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def importCalculatorSingleSectorGrossOutput(importer, exporter, sector):\r\n",
					"    # Filter the countrySectorGrossOutput DataFrame to get the output value for the importer and sector\r\n",
					"    countrySectorGrossOutputValue = countrySectorGrossOutput.loc[(countrySectorGrossOutput['country_code'] == importer) & (countrySectorGrossOutput['sector'] == sector), 'Value'].squeeze()\r\n",
					"\r\n",
					"    # Calculate the total output for the sector\r\n",
					"    sectorColSum = Z.loc[:, (importer, sector)].sum()\r\n",
					"\r\n",
					"    # Filter the Z DataFrame to get the relevant rows and columns\r\n",
					"    countryZ_row_filter = Z.index.get_level_values('Country_Code').str.match(exporter)\r\n",
					"    countryZ_column_filter = Z.columns.get_level_values('Country_Code').str.match(importer)\r\n",
					"\r\n",
					"    countryZ = Z.loc[countryZ_row_filter, countryZ_column_filter]\r\n",
					"    importContributions = (countryZ.loc[(exporter, sector), [(importer, sector)]].values[0]) / sectorColSum\r\n",
					"\r\n",
					"    result = (countrySectorGrossOutputValue-sectorColSum) * importContributions\r\n",
					"    return result"
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"importCalculatorSingleSectorGrossOutput('BEL', 'DEU', 'Transport')"
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def importCalculatorSingleSectorGrossExports(importer, exporter, sector):\r\n",
					"    # Filter the countrySectorGrossOutput DataFrame to get the output value for the importer and sector\r\n",
					"    countrySectorGrossExportsValue = countrySectorGrossExports.loc[(countrySectorGrossExports['country_code'] == importer) & (countrySectorGrossExports['sector'] == sector), 'Value'].squeeze()\r\n",
					"\r\n",
					"    # Calculate the total output for the sector\r\n",
					"    sectorColSum = Z.loc[:, (importer, sector)].sum()\r\n",
					"\r\n",
					"    # Filter the Z DataFrame to get the relevant rows and columns\r\n",
					"    countryZ_row_filter = Z.index.get_level_values('Country_Code').str.match(exporter)\r\n",
					"    countryZ_column_filter = Z.columns.get_level_values('Country_Code').str.match(importer)\r\n",
					"\r\n",
					"    countryZ = Z.loc[countryZ_row_filter, countryZ_column_filter]\r\n",
					"    importContributions = (countryZ.loc[(exporter, sector), [(importer, sector)]].values[0]) / sectorColSum\r\n",
					"\r\n",
					"    result = (countrySectorGrossOutputValue-sectorColSum) * importContributions\r\n",
					"    return result"
				],
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"importCalculatorSingleSectorGrossExports('BEL', 'DEU', 'Transport')"
				],
				"execution_count": 19
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def importCalculatorVector(importer, exporter, sectors):\r\n",
					"    result = []\r\n",
					"    for sector in sectors:\r\n",
					"        # Filter the countrySectorGrossOutput DataFrame to get the output value for the importer and sector\r\n",
					"        countrySectorGrossOutputValue = countrySectorGrossOutput.loc[(countrySectorGrossOutput['country_code'] == importer) & (countrySectorGrossOutput['sector'] == sector), 'Value'].squeeze()\r\n",
					"\r\n",
					"        # Calculate the total output for the sector\r\n",
					"        sectorColSum = Z.loc[:, (importer, sector)].sum()\r\n",
					"\r\n",
					"        # Filter the Z DataFrame to get the relevant rows and columns\r\n",
					"        countryZ_row_filter = Z.index.get_level_values('Country_Code').str.match(exporter)\r\n",
					"        countryZ_column_filter = Z.columns.get_level_values('Country_Code').str.match(importer)\r\n",
					"        countryZ = Z.loc[countryZ_row_filter, countryZ_column_filter]\r\n",
					"        importContributions = (countryZ.loc[(exporter, sector), [(importer, sector)]].values[0]) / sectorColSum\r\n",
					"\r\n",
					"        result.append((countrySectorGrossOutputValue-sectorColSum) * importContributions)\r\n",
					"    return result"
				],
				"execution_count": 20
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sectors = ['Agriculture', 'Fishing', 'Mining and Quarrying', 'Food & Beverages', 'Textiles and Wearing Apparel','Wood and Paper', 'Petroleum, Chemical and Non-Metallic Mineral Products', 'Metal Products','Electrical and Machinery', 'Transport Equipment', 'Other Manufacturing', 'Recycling','Electricity, Gas and Water', 'Construction', 'Maintenance and Repair',\t'Wholesale Trade', 'Retail Trade', 'Hotels and Restraurants', 'Transport', 'Post and Telecommunications','Finacial Intermediation and Business Activities', 'Public Administration', 'Education, Health and Other Services', 'Private Households', 'Others','Re-export & Re-import']\r\n",
					"importContributionVector = importCalculatorVector('BEL', 'DEU', sectors)\r\n",
					"#importContributionVector\r\n",
					"importContributionSum = np.squeeze(np.sum(importContributionVector))\r\n",
					"\r\n",
					"importContributionSum"
				],
				"execution_count": 21
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Balance of Trade Calculations"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"countrySectorExports = pd.DataFrame(EXGR_cs_c)\r\n",
					"countryCountryExports = pd.DataFrame(EXGR_c_c)\r\n",
					"\r\n",
					"countrySectorLabels = spark.read.load('abfss://acj802@ac2synapsedatalabstorage.dfs.core.windows.net/EORA_Labels/Country+Sector_Labels.csv', format='csv', sep=\"\\t\").toPandas()\r\n",
					"countryLabels = spark.read.load('abfss://acj802@ac2synapsedatalabstorage.dfs.core.windows.net/EORA_Labels/country-labels.csv', format='csv', sep=\"\\t\").toPandas()\r\n",
					"\r\n",
					"countrySectorExports.set_axis(countryLabels.values.squeeze(), axis = 1, inplace = True)\r\n",
					"\r\n",
					"countrySectorLabels = countrySectorLabels.iloc[1:]\r\n",
					"countrySectorLabels = countrySectorLabels.reset_index(drop = True)\r\n",
					"countrySectorExports = countrySectorExports.assign(_c0 = countrySectorLabels['_c0'])\r\n",
					"\r\n",
					"countrySectorExports = countrySectorExports.reindex(columns =[countrySectorExports.columns[-1]] + countrySectorExports.columns[:-1].tolist())\r\n",
					"\r\n",
					"countrySectorExports['_c0'] = countrySectorExports['_c0'].str.replace('Industries, ', '')\r\n",
					"countrySectorExports['_c0'] = countrySectorExports['_c0'].str.replace('Commodities, ', '')\r\n",
					"\r\n",
					"countryCountryExports.set_axis(countryLabels.values.squeeze(), axis = 1, inplace = True)\r\n",
					"countryCountryExports = countryCountryExports.assign(_c0 = countryLabels['_c0'])\r\n",
					"countryCountryExports = countryCountryExports.reindex(columns = [countryCountryExports.columns[-1]] + countryCountryExports.columns[:-1].tolist())\r\n",
					"countryCountryExports.set_index('_c0', inplace = True)"
				],
				"execution_count": 22
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def countryCountryBalanceOfTrade(supplier, countryOfInterest):\r\n",
					"    exportValue = countryCountryExports.loc[countryOfInterest, supplier]\r\n",
					"    importValue = countryCountryExports.loc[supplier, countryOfInterest]\r\n",
					"\r\n",
					"    BoT = exportValue-importValue\r\n",
					"    return BoT"
				],
				"execution_count": 23
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def grossBalanceOfTradeChecker(countryOfInterest):\r\n",
					"    BoT = 0\r\n",
					"    for supplier in countryCountryExports.columns:\r\n",
					"        exportValue = countryCountryExports.loc[countryOfInterest, supplier]\r\n",
					"        importValue = countryCountryExports.loc[supplier, countryOfInterest]\r\n",
					"        BoT += exportValue - importValue\r\n",
					"    return BoT"
				],
				"execution_count": 24
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def balanceOfTradeForAll(countryOfInterest):\r\n",
					"    BoT_list = []\r\n",
					"    for supplier in countryCountryExports.columns:\r\n",
					"        exportValue = countryCountryExports.loc[countryOfInterest, supplier]\r\n",
					"        importValue = countryCountryExports.loc[supplier, countryOfInterest]\r\n",
					"        BoT = exportValue - importValue\r\n",
					"        BoT_list.append(BoT)\r\n",
					"    return BoT_list"
				],
				"execution_count": 25
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"balanceOfTradeForAll('AFG')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"countryCountryBalanceOfTradeList = np.zeros((len(countryCountryExports.columns), len(countryCountryExports.columns)))\r\n",
					"for i, country in enumerate(countryCountryExports.columns):\r\n",
					"    BoT_list = balanceOfTradeForAll(country)\r\n",
					"    countryCountryBalanceOfTradeList[i] = np.array(BoT_list)"
				],
				"execution_count": 27
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"countryCountryBalanceOfTradeFrame = pd.DataFrame(np.zeros((len(countryCountryExports.columns), len(countryCountryExports.columns))), index=countryCountryExports.columns, columns=countryCountryExports.columns)\r\n",
					"for i, country in enumerate(countryCountryExports.columns):\r\n",
					"    BoT_list = balanceOfTradeForAll(country)\r\n",
					"    countryCountryBalanceOfTradeFrame.iloc[i] = np.array(BoT_list)"
				],
				"execution_count": 28
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"The basics of the EORA MRIO"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"$$ \\begin{array}{c|cc} & \\text{Z}_{\\text{1}} & \\text{Z}_{\\text{2}} & \\text{Y} & \\text{X}_{\\text{Go}} \\\\ \\hline  \\text{Z}_{\\text{1}} & 150 & 200 & 1650 & 2000 \\\\ \\text{Z}_{\\text{2}} & 100 & 300 & 2500 & 3000 \\\\ \\text{VA} & 1750 & 2500 \\\\ \\text{X}_{\\text{Go}} & 2000 & 3000 \\end{array} $$"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Where:\r\n",
					"- Z is the intermediate demand matrix\r\n",
					"- Y is the final demand matrix\r\n",
					"- VA is the value add matrix\r\n",
					"- $ X_{Go} $ is the gross output for that country/sector. $ X_{Go} $ can be calculated by doing the rowsum of the Z and Y matrices OR the columnsum of the Z and VA matrices."
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"$X_{Go}$ can be more formally written by the formula $X_{Go} = AX+Y$ where A is the direct and indirect contributors matrix. The A matrix can be cacluated (form the table above):\r\n",
					"\r\n",
					"$$ \\begin{bmatrix} \\frac{Z_{1,1}}{2000} & \\frac{Z_{1,2}}{3000} \\\\ \\frac{Z_{2,1}}{2000} & \\frac{Z_{2,2}}{3000} \\end{bmatrix} $$\r\n",
					"\r\n",
					"Value wise, this can be represented (using the values from above)\r\n",
					"\r\n",
					"$$ \\begin{bmatrix} \\frac{150}{2000} & \\frac{200}{3000} \\\\ \\frac{100}{2000} & \\frac{300}{3000} \\end{bmatrix} $$"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"This matrix is useful if you want to calculate the FUTURE output for a given country/sector where (naturally) the gross output is unknown. Assuming one has the A matrix and the expected Final Demand (Y), the projected gross output can be calculated using the following:\r\n",
					"\r\n",
					"$$ \\begin{align} \\text{Start} &: X=AX+Y \\\\ \\text{Step 1} &: X-AX=Y \\\\ \\text{Step 2} &: X(I-A) = Y \\\\ \\text{Step 3} &: X(I-A)(I-A)^{-1} = Y(I-A)^{-1} \\\\ \\text{Step 4} &: X=(I-A)^{-1} Y \\end{align} $$\r\n",
					"\r\n",
					"$I$ here is an identity matrix of the same size as $A$."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"countrySectorLabels = spark.read.load('abfss://acj802@ac2synapsedatalabstorage.dfs.core.windows.net/EORA_Labels/Country+Sector_Labels.csv', format='csv', sep=\"\\t\").toPandas()\r\n",
					"countryLabels = spark.read.load('abfss://acj802@ac2synapsedatalabstorage.dfs.core.windows.net/EORA_Labels/country-labels.csv', format='csv', sep=\"\\t\").toPandas()\r\n",
					"\r\n",
					"countrySectorLabels = countrySectorLabels.iloc[1:]\r\n",
					"countrySectorLabels = countrySectorLabels.reset_index(drop = True)\r\n",
					"countrySectorLabels['_c0'] = countrySectorLabels['_c0'].str.replace('Industries, ', '')\r\n",
					"countrySectorLabels['_c0'] = countrySectorLabels['_c0'].str.replace('Commodities, ', '')\r\n",
					"countrySectorLabels[['Country_Code', 'Sector']] = countrySectorLabels['_c0'].str.split(', ', n=1, expand=True)\r\n",
					"countrySectorLabels = countrySectorLabels.drop(['_c0'], axis = 1)\r\n",
					"\r\n",
					"countrySectorLabels"
				],
				"execution_count": 40
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"FDFrame = pd.DataFrame(fd_matrix)\r\n",
					"FDFrame = FDFrame.iloc[:-1, :-6]\r\n",
					"FDFrame = FDFrame.set_index([countrySectorLabels['Country_Code'], countrySectorLabels['Sector']])"
				],
				"execution_count": 41
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"FDFrame"
				],
				"execution_count": 42
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"VAindex1 = countrySectorLabels['Country_Code']\r\n",
					"VAindex2 = countrySectorLabels['Sector']\r\n",
					"\r\n",
					"VAFrame = pd.DataFrame(va_matrix)\r\n",
					"VAFrame = VAFrame.iloc[:, :-1]\r\n",
					"VAFrame.columns = pd.MultiIndex.from_tuples(list(zip(VAindex1, VAindex2)))\r\n",
					"VAFrame.columns.names = ['Country_Code', 'Sector']"
				],
				"execution_count": 44
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Need to double check my math on these as this currently doesnt add up"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def XgoCalcRowSum(country, sector):\r\n",
					"    ZRowSum = (Z.loc[(country, sector), :]).sum()\r\n",
					"    FDSum = (FDFrame.loc[(country, sector), :]).sum()\r\n",
					"    rowSum = ZRowSum+FDSum\r\n",
					"    return rowSum"
				],
				"execution_count": 45
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"XgoCalcRowSum('DEU', 'Transport')"
				],
				"execution_count": 49
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def XgoCalcColSum(country, sector):\r\n",
					"    ZColSum = (Z.loc[:, (country, sector)]).sum()\r\n",
					"    VASum = (VAFrame.loc[:, (country, sector)]).sum()\r\n",
					"    colSum = ZColSum + VASum\r\n",
					"\r\n",
					"    return colSum"
				],
				"execution_count": 47
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"XgoCalcColSum('DEU', 'Transport')"
				],
				"execution_count": 50
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"(GrossOutput, Oil, Receiver - Colsum (of the Z matrix) of the Receiver sector) * (Sender sector input to Receiver sector/ Colsum of Receiver Oil sector)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Who is doing the importing\r\n",
					"receiver = 'BEL'\r\n",
					"#Who is doing the exporting \r\n",
					"sender = 'DEU'\r\n",
					"#The sector of interest\r\n",
					"sector = 'Agriculture'\r\n",
					"\r\n",
					"#The Gross Ouput, per sector, for each country\r\n",
					"countrySectorGrossOutput = pd.DataFrame(GO_cs)\r\n",
					"#Putting labels on it\r\n",
					"countrySectorGrossOutput = countrySectorGrossOutput.set_index([countrySectorLabels['Country_Code'], countrySectorLabels['Sector']])\r\n",
					"#Getting the gross output of the sector of interest for the importer\r\n",
					"receiverGrossOutputSector = countrySectorGrossOutput.loc[(receiver, sector), :].values[0]\r\n",
					"\r\n",
					"#This is multistep. We first slice down to the row of the exporter. We are then slicing to the columns where the sender is present in the index.\r\n",
					"#This gives a 1x26 vector that we then rowsum on to give us our value.\r\n",
					"senderInputToReceiver = Z.loc[(sender, sector), (receiver, slice(None))].sum()\r\n",
					"\r\n",
					"#This is the column sum of the all of the inputs into our importing country's sector of interest. Everyone from AFG to ZWE.\r\n",
					"receiverZColsum = Z.loc[:, (receiver, sector)].sum(axis = 0)"
				],
				"execution_count": 269
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Lets assume that our exporting nation is Germany (DEU) and the importing nation is Belgium (BEL) and the sector of interest is agriculture. We want to find the value add to the Belgian exports from German imports. Belgium imports, $5 of German agriculture product, but turns that into $20 of finished products. We want to find the delta.\r\n",
					"\r\n",
					"Our result is the [Gross Output of the Belgian Agriculture Sector - the column Sum of ALL of the intermediate inputs (Z matrix, from AFG to ZWE)]*[(the summed value of German agriculture products into the 26 sectors of the Belgian economy / the column Sum of ALL of the intermediate inputs (Z matrix, from AFG to ZWE) into the Belgian agriculture sector)]"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"result = (receiverGrossOutputSector - receiverZColsum) * (senderInputToReceiver/receiverZColsum)\r\n",
					"result"
				],
				"execution_count": 268
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"countrySectorLabels = spark.read.load('abfss://acj802@ac2synapsedatalabstorage.dfs.core.windows.net/EORA_Labels/Country+Sector_Labels.csv', format='csv', sep=\"\\t\").toPandas()\r\n",
					"countrySectorLabels = countrySectorLabels.iloc[1:]\r\n",
					"countrySectorLabels = countrySectorLabels.reset_index(drop = True)\r\n",
					"\r\n",
					"countrySectorLabels['_c0'] = countrySectorLabels['_c0'].str.replace('Industries, ', '')\r\n",
					"countrySectorLabels['_c0'] = countrySectorLabels['_c0'].str.replace('Commodities, ', '')\r\n",
					"countrySectorLabels[['Country_Code', 'Sector']] = countrySectorLabels['_c0'].str.split(', ', n=1, expand=True)\r\n",
					"countrySectorLabels = countrySectorLabels.drop(['_c0'], axis = 1)"
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"country_codes_list = countrySectorLabels['Country_Code'].unique()\r\n",
					"sectors_list = countrySectorLabels['Sector'].unique()"
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"num_cntry = 189\r\n",
					"num_sectors = 26\r\n",
					"num_fd_components = 6\r\n",
					"year_start = 1990\r\n",
					"year_end = 2022\r\n",
					"\r\n",
					"years = np.linspace(year_start, year_end, num = year_end - year_start + 1).astype(int).astype(str)\r\n",
					"\r\n",
					"def calculate_GO_cs_and_Z(years):\r\n",
					"    gross_output_list = []\r\n",
					"    Z_list = []\r\n",
					"    for year in years:\r\n",
					"        # Read in the data\r\n",
					"        fd_matrix_path = f'abfss://acj802@ac2synapsedatalabstorage.dfs.core.windows.net/Eora26_'+year+'_bp/Eora26_'+year+'_bp_FD.txt'\r\n",
					"        id_matrix_path = f'abfss://acj802@ac2synapsedatalabstorage.dfs.core.windows.net/Eora26_'+year+'_bp/Eora26_'+year+'_bp_T.txt'\r\n",
					"        va_matrix_path = f'abfss://acj802@ac2synapsedatalabstorage.dfs.core.windows.net/Eora26_'+year+'_bp/Eora26_'+year+'_bp_VA.txt'\r\n",
					"\r\n",
					"        fd_matrix = spark.read.load(fd_matrix_path, format='csv', sep=\"\\t\").toPandas().to_numpy(dtype=float)\r\n",
					"        id_matrix = spark.read.load(id_matrix_path, format='csv', sep=\"\\t\").toPandas().to_numpy(dtype=float)\r\n",
					"        va_matrix = spark.read.load(va_matrix_path, format='csv', sep=\"\\t\").toPandas().to_numpy(dtype=float)\r\n",
					"\r\n",
					"        # Compute Stats\r\n",
					"        va_total_cs = va_matrix.sum(axis = 0)\r\n",
					"        FD = fd_matrix.reshape((num_cntry*num_sectors + 1), num_fd_components, -1)\r\n",
					"        FD = FD.sum(axis=1)\r\n",
					"        FD = np.squeeze(FD) # Squeeze to remove single-dimensional entries\r\n",
					"\r\n",
					"        GRTR_INT_cs_cs = id_matrix[0:(num_cntry*num_sectors), 0:(num_cntry*num_sectors)]\r\n",
					"        GRTR_FNL_cs_c = FD[0:num_cntry*num_sectors,0:num_cntry]\r\n",
					"        VALUE_cs = va_total_cs[0:(num_cntry*num_sectors)]\r\n",
					"\r\n",
					"        # Initialize empty list to hold blocks\r\n",
					"        imtx_cs_c = []\r\n",
					"        imtx_cs_cs = []\r\n",
					"        imtx_c_cs=[]\r\n",
					"        imtx_cs_ck = []\r\n",
					"\r\n",
					"        # Create block matrix\r\n",
					"        iblk_cs_c = np.ones((num_sectors, 1))  # Create num_sectors x 1 vector of ones\r\n",
					"        iblk_cs_cs = np.ones((num_sectors,num_sectors))\r\n",
					"        ivector = np.ones((1, num_sectors))\r\n",
					"        iblk_cs_ck = np.ones((num_sectors, num_fd_components))\r\n",
					"\r\n",
					"        # Construct block diagonal matrix\r\n",
					"        for j in range(num_cntry):\r\n",
					"            if j == 0:\r\n",
					"                imtx_cs_c = iblk_cs_c  # Initialize with the first block\r\n",
					"                imtx_cs_cs = iblk_cs_cs\r\n",
					"                imtx_c_cs = ivector\r\n",
					"                imtx_cs_ck = iblk_cs_ck\r\n",
					"\r\n",
					"            else:\r\n",
					"                imtx_cs_c = block_diag(imtx_cs_c, iblk_cs_c) \r\n",
					"                imtx_cs_cs = block_diag(imtx_cs_cs, iblk_cs_cs) \r\n",
					"                imtx_c_cs = block_diag(imtx_c_cs, ivector)\r\n",
					"                imtx_cs_ck = block_diag(imtx_cs_ck, iblk_cs_ck)\r\n",
					"\r\n",
					"        imtx_c_c = np.eye(num_cntry)\r\n",
					"\r\n",
					"        #Gross Output\r\n",
					"        GO_cs_c = GRTR_INT_cs_cs.reshape(num_cntry*num_sectors, num_sectors, -1)\r\n",
					"        GO_cs_c = GO_cs_c.sum(axis = 1)\r\n",
					"        GO_cs_c = np.squeeze(GO_cs_c)\r\n",
					"        GO_cs_c = GO_cs_c + GRTR_FNL_cs_c\r\n",
					"        GO_cs = GO_cs_c.sum(axis = 1)\r\n",
					"        GO_c_c = np.matmul(imtx_c_cs,GO_cs_c)\r\n",
					"        elementwise_GO_product =  np.tile(GO_cs[:, np.newaxis],(1,num_cntry)) * imtx_cs_c\r\n",
					"        summed_GO_result = elementwise_GO_product.sum(axis=0)\r\n",
					"        GO_c = summed_GO_result.T\r\n",
					"\r\n",
					"        gross_output_list.append((year, GO_cs))\r\n",
					"        Z_list.append((year, id_matrix))\r\n",
					"\r\n",
					"    return gross_output_list, Z_list"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"gross_output_list, Z_matrices = calculate_GO_cs_and_Z(years)"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def valueAddCalculatorOneToROW_2(importer, exporter_list, sector_list, year_list, GO_cs_list, Z_list):\r\n",
					"    results_dfs = []\r\n",
					"    for year in year_list:\r\n",
					"        #print(\"Calculating for year:\", year)\r\n",
					"        GO_cs = pd.DataFrame(GO_cs_list[year-year_start][1])\r\n",
					"        GO_cs = GO_cs.assign(**{'Country_Code': countrySectorLabels['Country_Code'], 'Sector': countrySectorLabels['Sector']}).rename(columns={0: 'Value'})\r\n",
					"        GO_cs = GO_cs.set_index([countrySectorLabels['Country_Code'], countrySectorLabels['Sector']])\r\n",
					"\r\n",
					"        Z = pd.DataFrame(Z_list[year-year_start][1])\r\n",
					"        Z = Z.iloc[:-1, :-1]\r\n",
					"        Z = Z.set_index([Zindex1, Zindex2])\r\n",
					"        Z.columns = pd.MultiIndex.from_tuples(list(zip(Zindex1, Zindex2)))\r\n",
					"        Z.columns.names = ['Country_Code', 'Sector']\r\n",
					"\r\n",
					"        for exporter in exporter_list:\r\n",
					"            for sector in sector_list:\r\n",
					"                # Calculate the gross output of the sector of interest for the importer\r\n",
					"                receiverGrossOutputSector = GO_cs.loc[(importer, sector), :].values[0]\r\n",
					"\r\n",
					"                # Calculate the input from the exporter to the importer in the given sector\r\n",
					"                senderInputToReceiver = Z.loc[(exporter, sector), (importer, slice(None))].sum()\r\n",
					"\r\n",
					"                # Calculate the total input to the importer's sector from all exporters\r\n",
					"                receiverZColsum = Z.loc[:, (importer, sector)].sum(axis = 0)\r\n",
					"\r\n",
					"                # Calculate the value added by the exporter in the given sector for the importer\r\n",
					"                result = (receiverGrossOutputSector - receiverZColsum) * (senderInputToReceiver/receiverZColsum)\r\n",
					"\r\n",
					"                # Append the results to the dataframe\r\n",
					"                result_df = pd.DataFrame({\r\n",
					"                    'Importer': [importer],\r\n",
					"                    'Exporter': [exporter],\r\n",
					"                    'Sector': [sector],\r\n",
					"                    'Year': [year],\r\n",
					"                    'Value Added': [result],\r\n",
					"                    'Sender Input to Receiver': [senderInputToReceiver],\r\n",
					"                })\r\n",
					"                results_dfs.append(result_df)\r\n",
					"\r\n",
					"    # Concatenate the list of result dataframes into a single dataframe\r\n",
					"    results_df = pd.concat(results_dfs, ignore_index=True)\r\n",
					"    \r\n",
					"    results_df_csv_buffer = io.StringIO()\r\n",
					"    results_df.to_csv(results_df_csv_buffer, index=False)\r\n",
					"    results_df_csv_string = results_df_csv_buffer.getvalue()\r\n",
					"    out_path = f\"abfss://acj802@ac2synapsedatalabstorage.dfs.core.windows.net/EORA26/{importer}_ValueAdd_1990_2022.csv\"\r\n",
					"    mssparkutils.fs.put(out_path, results_df_csv_string, overwrite=True)\r\n",
					"\r\n",
					"    return results_df"
				],
				"execution_count": 23
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"valueAddCalculatorOneToROW_2('NAM', exporter_list = country_codes_list, sector_list = sectors_list, year_list = range(1990, 2023), GO_cs_list = gross_output_list, Z_list = Z_matrices)"
				],
				"execution_count": 48
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def valueAddCalculatorMultiToROW(importer_list, exporter_list, sector_list, year_list, GO_cs_list, Z_list):\r\n",
					"    results_dfs_list = []\r\n",
					"    for importer in importer_list:\r\n",
					"        results_dfs = []\r\n",
					"        for year in year_list:\r\n",
					"            #print(\"Calculating for year:\", year)\r\n",
					"            GO_cs = pd.DataFrame(GO_cs_list[year-year_start][1])\r\n",
					"            GO_cs = GO_cs.assign(**{'Country_Code': countrySectorLabels['Country_Code'], 'Sector': countrySectorLabels['Sector']}).rename(columns={0: 'Value'})\r\n",
					"            GO_cs = GO_cs.set_index([countrySectorLabels['Country_Code'], countrySectorLabels['Sector']])\r\n",
					"\r\n",
					"            Z = pd.DataFrame(Z_list[year-year_start][1])\r\n",
					"            Z = Z.iloc[:-1, :-1]\r\n",
					"            Z = Z.set_index([Zindex1, Zindex2])\r\n",
					"            Z.columns = pd.MultiIndex.from_tuples(list(zip(Zindex1, Zindex2)))\r\n",
					"            Z.columns.names = ['Country_Code', 'Sector']\r\n",
					"\r\n",
					"            for exporter in exporter_list:\r\n",
					"                for sector in sector_list:\r\n",
					"                    # Calculate the gross output of the sector of interest for the importer\r\n",
					"                    receiverGrossOutputSector = GO_cs.loc[(importer, sector), :].values[0]\r\n",
					"\r\n",
					"                    # Calculate the input from the exporter to the importer in the given sector\r\n",
					"                    senderInputToReceiver = Z.loc[(exporter, sector), (importer, slice(None))].sum()\r\n",
					"\r\n",
					"                    # Calculate the total input to the importer's sector from all exporters\r\n",
					"                    receiverZColsum = Z.loc[:, (importer, sector)].sum(axis = 0)\r\n",
					"\r\n",
					"                    # Calculate the value added by the exporter in the given sector for the importer\r\n",
					"                    result = (receiverGrossOutputSector - receiverZColsum) * (senderInputToReceiver/receiverZColsum)\r\n",
					"\r\n",
					"                    # Append the results to the dataframe\r\n",
					"                    result_df = pd.DataFrame({\r\n",
					"                        'Importer': [importer],\r\n",
					"                        'Exporter': [exporter],\r\n",
					"                        'Sector': [sector],\r\n",
					"                        'Year': [year],\r\n",
					"                        'Value Added': [result],\r\n",
					"                        'Sender Input to Receiver': [senderInputToReceiver],\r\n",
					"                    })\r\n",
					"                    results_dfs.append(result_df)\r\n",
					"\r\n",
					"        # Concatenate the list of result dataframes into a single dataframe\r\n",
					"        results_df = pd.concat(results_dfs, ignore_index=True)\r\n",
					"        \r\n",
					"        results_df_csv_buffer = io.StringIO()\r\n",
					"        results_df.to_csv(results_df_csv_buffer, index=False)\r\n",
					"        results_df_csv_string = results_df_csv_buffer.getvalue()\r\n",
					"        out_path = f\"abfss://acj802@ac2synapsedatalabstorage.dfs.core.windows.net/EORA26/{importer}_ValueAdd_1990_2022.csv\"\r\n",
					"        mssparkutils.fs.put(out_path, results_df_csv_string, overwrite=True)\r\n",
					"\r\n",
					"        results_dfs_list.append(results_df)\r\n",
					"\r\n",
					"    return results_dfs_list"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"nations = ['USA', 'CHN', 'RUS']\r\n",
					"valueAddCalculatorMultiToROW(importer_list = nations, exporter_list = country_codes_list, sector_list = sectors_list, year_list = range(1990, 2023), GO_cs_list = gross_output_list, Z_list = Z_matrices)"
				],
				"execution_count": 24
			}
		]
	}
}